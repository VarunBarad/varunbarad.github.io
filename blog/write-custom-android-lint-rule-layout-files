<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="stylesheet" href="/assets/css/fontawesome-all.css">
    <link rel="icon" type="image/png" href="/favicon.png"/>
    <title>Write Custom Android Lint Rule - Layout Files - Varun Barad</title>
    <meta name="description" content="Writing our own custom android lint rules for verifying layout files."/>

    

    <!-- RSS Feed meta-data -->
    <link type="application/atom+xml" rel="alternate" href="https://varunbarad.com/feed.xml" title="Varun Barad - Curious Developer"/>

    <!-- Twitter meta-data -->
    <meta name="twitter:site" content="@varun_barad"/>
    <meta name="twitter:image:src" content="https://varunbarad.com/assets/images/logo-hd.png"/>
    <meta name="twitter:card" content="summary"/>
    <meta name="twitter:title" content="Write Custom Android Lint Rule - Layout Files"/>
    <meta name="twitter:description" content="Writing our own custom android lint rules for verifying layout files."/>

    <!-- Open-Graph meta-data -->
    <meta property="og:site_name" content="Varun Barad - Curious Developer"/>
    <meta property="og:image" content="https://varunbarad.com/assets/images/logo-hd.png"/>
    <meta property="og:type" content="object"/>
    <meta property="og:title" content="Write Custom Android Lint Rule - Layout Files"/>
    <meta property="og:url" content="https://varunbarad.com/blog/write-custom-android-lint-rule-layout-files"/>
    <meta property="og:description" content="Writing our own custom android lint rules for verifying layout files."/>
</head>
<body>
<div>
    <div id="header">
        <div class="row header">
            <div class="title col-12 col-sm-6 col-md-4 col-lg-4 col-xl-4">
                <a href="/">
                    <div class="title">Varun Barad</div>
                </a>
            </div>
            <div class="col-12 col-sm-6 col-md-8 col-lg-8 col-xl-8">
                <nav class="menu text-right">
                    <a href="/blog">Blog</a>
                    <a href="/projects">Projects</a>
                    <a href="/books">Books</a>
                    <a href="/ideas">Ideas</a>
                    <a href="/contact">Contact</a>
                    <a href="/resume">My Resume</a>
                </nav>
            </div>
        </div>
    </div>
    <article class="h-entry">
        <div class="content row">
            <div class="post-container">
                <div class="col-12 col-sm-12 col-md-6 col-lg-6 col-xl-6">
                    <div>
                        <div class="page-title text-uppercase text-center p-name">
                            <a class="u-url" href="/blog/write-custom-android-lint-rule-layout-files">Write Custom Android Lint Rule - Layout Files</a>
                        </div>
                        <div class="text-center">
                            By <a class="p-author h-card" href="https://varunbarad.com">Varun Barad</a> on <time class="post-date dt-published" datetime="Thu Feb 27 2020 12:00:00 GMT+0530 (India Standard Time)">February 27, 2020</time>
                        </div>
                        <div class="post-content e-content"><p><img src="https://varunbarad.com/assets/images/posts/headers/write-custom-android-lint-rule-layout-files.jpg" alt="Article Header - Write Custom Android Lint Rules"></p>
<p>Welcome devs, I recently faced an issue where if I didn't specify any <code>android:inputType</code> for <code>EditText</code> then keyboard capitalisation did not correctly show. The deeper problem was that I always forgot to include that attribute. So I decided to use a lint check which would fail my build if any of my <code>EditText</code> does not have the <code>android:inputType</code> attribute.</p>
<p>Since there was no such thing included in pre-provided checks I decided to write a custom lint rule. What follows is a guide on how to write a lint-check which goes checks all of our layout files and flags any <code>EditText</code> without <code>android:inputType</code> attribute.</p>
<h2>What is Android lint?</h2>
<p>Android lint is a tool which provides us static code-analysis (it does not need to run the application to identify potential problems). The Android SDK already provides us with some pre-made lint checks, but the best part is that it allows us to write our own custom lint checks.</p>
<h2>Writing a custom lint check</h2>
<p>We will be writing a lint check which checks whether each <code>EditText</code>, <code>androidx.appcompat.widget.AppCompatEditText</code> and <code>android.support.v7.widget.AppCompatEditText</code> has the <code>android:inputType</code> attribute defined or not.
This lint check is set to fail the build when it finds any of the above element not containing the <code>android:inputType</code> attribute.</p>
<h3>Create a new Library Module</h3>
<p>In the project for which you want to write the lint check, add a new &quot;Java or Kotlin Library&quot; module.</p>
<ul>
<li>For Library name you can put anything but I have used <code>lint-checks</code></li>
<li>For Class name put <code>LintRegistry</code> (we will get to the reasoning later)</li>
<li>I have selected Kotlin as the language</li>
</ul>
<p><img src="https://varunbarad.com/assets/images/posts/write-custom-android-lint-rule-layout-files/create-new-module.png" alt="Screenshot - Add new Java or Kotlin Library Module"></p>
<h3>Add dependencies in Gradle</h3>
<p>You only need 3 dependencies in your <code>lint-checks</code> module's <code>build.gradle</code> and all of them need to be only <code>compileOnly</code></p>
<pre><code class="language-groovy">dependencies {
    compileOnly &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.61&quot;
    compileOnly &quot;com.android.tools.lint:lint-api:26.6.0&quot;
    compileOnly &quot;com.android.tools.lint:lint-checks:26.6.0&quot;
}
</code></pre>
<h3>Create the detector</h3>
<p>Now let's write the class which will actually detect the issues. We create a new class named <code>InputTypeDetector</code> which extends from <code>LayoutDetector</code></p>
<pre><code class="language-kotlin">class InputTypeDetector : LayoutDetector() {
   ...
}
</code></pre>
<p>Now we specify the Issue that we want our detector to raise when we find and edit-text without input-type. We declare it as a property under companion object of this class (and mark it with <code>@JvmStatic</code> so that it appears as static field when accessed from Java code).</p>
<pre><code class="language-kotlin">companion object {
    @JvmStatic
    internal val ISSUE_MISSING_INPUT_TYPE = Issue.create(
        id = &quot;MissingInputType&quot;,
        briefDescription = &quot;Specify inputType attribute to get proper keyboard shown by system.&quot;,
        explanation = &quot;You should specify an inputType for each EditText so that you can get the proper keyboard to be shown by system.&quot;,
        category = Category.USABILITY,
        priority = 8,
        severity = Severity.ERROR,
        implementation = Implementation(
            InputTypeDetector::class.java,
            Scope.ALL_RESOURCES_SCOPE
        )
    ).addMoreInfo(&quot;https://developer.android.com/training/keyboard-input/style&quot;)
}
</code></pre>
<p>The important things here are:</p>
<ul>
<li><code>id</code> - The name which is shown in the lint report</li>
<li><code>severity</code> - There are many types of severity, here we have specified <code>ERROR</code> as we want the build to fail when we find this issue</li>
<li><code>implementation</code> - The implementation defines which XML files to scan for this issue and which detector to use to detect this issue.</li>
</ul>
<p>After that we override the function <code>getApplicableElements</code>, where we specify for which elements we want this detector to be run (so that our detector doesn't get unnecessarily called for every element).</p>
<pre><code class="language-kotlin">override fun getApplicableElements(): Collection&lt;String&gt;? {
    return listOf(
        SdkConstants.EDIT_TEXT,
        &quot;androidx.appcompat.widget.AppCompatEditText&quot;,
        &quot;android.support.v7.widget.AppCompatEditText&quot;
    )
}
</code></pre>
<p>Since we only want our detector to be called for <code>EditText</code>, <code>androidx.appcompat.widget.AppCompatEditText</code> and <code>android.support.v7.widget.AppCompatEditText</code> we return a list of all of them.</p>
<p>The last thing remaining to be done in detector is to actually determine if any given element has the problem or not. For that we override the <code>visitElement</code> method.</p>
<pre><code class="language-kotlin">override fun visitElement(context: XmlContext, element: Element) {
    if (!element.hasAttribute(SdkConstants.ATTR_INPUT_TYPE)) { // Check if the element has the `android:inputType` attribute
        context.report(
            issue = ISSUE_MISSING_INPUT_TYPE, // The issue that we defined above
            location = context.getLocation(element),
            message = ISSUE_MISSING_INPUT_TYPE.getExplanation(TextFormat.TEXT)
        )
    }
}
</code></pre>
<p>Here we are doing 2 things</p>
<ol>
<li>Checking if given element has the <code>android:inputType</code> attribute or not</li>
<li>Raise the issue if the <code>android:inputType</code> attribute is not present</li>
</ol>
<p><strong>Note:</strong> One thing you might have noticed is the <code>location</code> parameter, that is used by the <code>lint</code> tool to show exactly where any issue is reported.</p>
<h3>Registering the Issue</h3>
<p>Now we have declared the issue and corresponding detector, but we need to register them at a central location so that the lint tool knows that it has to execute these checks too. For that we go back to our <code>LintRegistry</code> class that we declared earlier when creating the <code>lint-checks</code> module.</p>
<p>We extend that class from <code>IssueRegistry</code> class and override a couple of properties.</p>
<pre><code class="language-kotlin">class LintRegistry : IssueRegistry() {
    override val api: Int
        get() = CURRENT_API

    override val issues: List&lt;Issue&gt;
        get() = listOf(
            InputTypeDetector.ISSUE_MISSING_INPUT_TYPE
        )
}
</code></pre>
<p>Any future issues that we declare/write are to be added to this <code>issues</code> property list.</p>
<h3>Registering our Issue Registry</h3>
<p>We now need to declare this class within the manifest of our JAR. We do this in our build script. Add the following block under your <code>lint-checks</code> module's <code>build.gradle</code> file</p>
<pre><code class="language-groovy">jar {
    manifest {
        // Format is
        // attributes(&quot;Lint-Registry-v2&quot;: &quot;&lt;fully-qualified-class-name-of-your-issue-registry&gt;&quot;)
        attributes(&quot;Lint-Registry-v2&quot;: &quot;com.varunbarad.androidlintchecks.LintRegistry&quot;)
    }
}
</code></pre>
<h2>Integrating our custom lint check module into our project</h2>
<p>In your <code>app</code> module go and add a <code>lintChecks</code> dependency on your <code>lint-checks</code> module like this</p>
<pre><code class="language-groovy">dependencies {
    lintChecks project(&quot;:lint-checks&quot;)
    ...
}
</code></pre>
<h2>Run the lint checks</h2>
<p>That was all that was needed to write your custom lint check. Now whenever you run a lint check using gradle, it will also check whether your code passes our custom lint checks or not.</p>
<pre><code class="language-shell"># Command to run lint check
./gradlew lint
</code></pre>
<p>Want to discuss this or any other interesting thing, hit me up on Twitter <a href="https://twitter.com/varun_barad">@varun_barad</a>.</p>
<h3>Edits</h3>
<ol>
<li><strong>2020-03-02:</strong> Add the step of &quot;Registering our Issue Registry&quot;</li>
</ol>
</div>
                    </div>
                    <div class="post-categories-container">
                        Categories:
                        <div>
                            
                                <a href="/category/android" class="badge badge-warning">#android</a>
                            
                                <a href="/category/programming" class="badge badge-warning">#programming</a>
                            
                            <a href="/blog" class="badge badge-warning">#all</a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </article>
    <div>
        <div class="footer">
            <div>
                <a href="https://github.com/VarunBarad" rel="me">
                    <i class="fab fa-github social-links"></i>
                </a>
                <a href="https://twitter.com/varun_barad" rel="me">
                    <i class="fab fa-twitter social-links"></i>
                </a>
                <a href="https://dev.to/varunbarad" rel="me">
                    <i class="fab fa-dev social-links"></i>
                </a>
                <a href="https://stackoverflow.com/users/4717436/varunbarad" rel="me">
                    <i class="fab fa-stack-overflow social-links"></i>
                </a>
            </div>
            <div class="developer-attribution">
                Made by <a href="https://dixita0607.github.io">Dixita Ganatra</a>
            </div>
        </div>
    </div>
</div>

<script src="/assets/js/jquery.min.js"></script>
<script src="/assets/js/bootstrap.min.js"></script>
</body>
</html>
