<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://varunbarad.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://varunbarad.com/" rel="alternate" type="text/html" /><updated>2020-01-28T15:26:50+05:30</updated><id>https://varunbarad.com/feed.xml</id><title type="html">Varun Barad - Curious Developer</title><subtitle>My online home where I post about new things I learn or find interesting.</subtitle><author><name>Varun Barad</name></author><entry><title type="html">Record Linux terminal session</title><link href="https://varunbarad.com/programming/2019/10/26/record-linux-terminal-session.html" rel="alternate" type="text/html" title="Record Linux terminal session" /><published>2019-10-26T12:00:00+05:30</published><updated>2019-10-26T12:00:00+05:30</updated><id>https://varunbarad.com/programming/2019/10/26/record-linux-terminal-session</id><content type="html" xml:base="https://varunbarad.com/programming/2019/10/26/record-linux-terminal-session.html">&lt;p&gt;I was recently setting up my computer with Ubuntu on it and this time I was decided that I would document every step of the process so that I can get it done faster the next time. That thought and process worked easily for the programs whose installations were just a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install ...&lt;/code&gt; but when I was installing something new (like VS Code) there were many steps involved and it wasn’t an easy task to document them as I went on installing those things.&lt;/p&gt;

&lt;p&gt;What I decided to then do was to just record my terminal sessions for each such long program and review those recordings later to write a script for everything that I needed to do.&lt;/p&gt;

&lt;p&gt;Linux has a handy utility called &lt;code class=&quot;highlighter-rouge&quot;&gt;script&lt;/code&gt; which does just that. If it isn’t pre-installed then you can easily install it with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt install script&lt;/code&gt; as it is generally available in the default PPA.&lt;/p&gt;

&lt;p&gt;Using it is straight-forward too.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;script &amp;lt;file_name_to_write_record_to&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also find these options to be of significance:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-a, --append&lt;/code&gt;: This appends the recording if the file is already existing.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-c, --command &amp;lt;command_which_is_to_be_recorded&amp;gt;&lt;/code&gt;: If you want to record the interaction of a program with terminal then you can use this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found this command to be quite helpful in my recent endeavour of documenting the setup process and think it might others too. Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">I was recently setting up my computer with Ubuntu on it and this time I was decided that I would document every step of the process so that I can get it done faster the next time. That thought and process worked easily for the programs whose installations were just a simple sudo apt install ... but when I was installing something new (like VS Code) there were many steps involved and it wasn’t an easy task to document them as I went on installing those things. What I decided to then do was to just record my terminal sessions for each such long program and review those recordings later to write a script for everything that I needed to do. Linux has a handy utility called script which does just that. If it isn’t pre-installed then you can easily install it with sudo apt install script as it is generally available in the default PPA. Using it is straight-forward too. script &amp;lt;file_name_to_write_record_to&amp;gt; I also find these options to be of significance: -a, --append: This appends the recording if the file is already existing. -c, --command &amp;lt;command_which_is_to_be_recorded&amp;gt;: If you want to record the interaction of a program with terminal then you can use this. I found this command to be quite helpful in my recent endeavour of documenting the setup process and think it might others too. Want to discuss this or any other interesting thing, hit me up on Twitter @varun_barad</summary></entry><entry><title type="html">Sync git fork with upstream</title><link href="https://varunbarad.com/programming/2019/10/25/sync-git-fork-with-upstream.html" rel="alternate" type="text/html" title="Sync git fork with upstream" /><published>2019-10-25T12:00:00+05:30</published><updated>2019-10-25T12:00:00+05:30</updated><id>https://varunbarad.com/programming/2019/10/25/sync-git-fork-with-upstream</id><content type="html" xml:base="https://varunbarad.com/programming/2019/10/25/sync-git-fork-with-upstream.html">&lt;p&gt;It is a common situation when we fork a project on Github and after some time we want to update our fork with the changes that have been integrated into the source project from where we forked. This is a simple guide on how to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conditions:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We have the &lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt; of source project added to our local git repo.&lt;/li&gt;
  &lt;li&gt;The name of the source project remote is &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We are syncing changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream/master&lt;/code&gt; to our local &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are the steps I found on Github’s guide.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Commit/Stash all your local changes.&lt;/li&gt;
  &lt;li&gt;Checkout your local &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch if not already there. &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fetch (not pull) changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch upstream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Merge changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream/master&lt;/code&gt; to local &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge upstream/master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Resolve merge-conflicts, if any.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And you are done. Your local &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; branch is now updated with changes from &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream/master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork&quot;&gt;Github guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; Syncing like this will only update your local &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. You will still need to push those synced changes to your Github repo if you want to update that too.&lt;/p&gt;

&lt;p&gt;This was just a quick tip that I needed quite a lot recently and every time I had to go and search for that guide. So I wrote this to solidify the concepts in my mind. If you have any more such tips I would love to hear about them at this &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">It is a common situation when we fork a project on Github and after some time we want to update our fork with the changes that have been integrated into the source project from where we forked. This is a simple guide on how to do that. Conditions: We have the remote of source project added to our local git repo. The name of the source project remote is upstream. We are syncing changes from upstream/master to our local master branch. Below are the steps I found on Github’s guide. Commit/Stash all your local changes. Checkout your local master branch if not already there. git checkout master Fetch (not pull) changes from upstream. git fetch upstream Merge changes from upstream/master to local master. git merge upstream/master Resolve merge-conflicts, if any. And you are done. Your local master branch is now updated with changes from upstream/master. Source: Github guide Tip: Syncing like this will only update your local master. You will still need to push those synced changes to your Github repo if you want to update that too. This was just a quick tip that I needed quite a lot recently and every time I had to go and search for that guide. So I wrote this to solidify the concepts in my mind. If you have any more such tips I would love to hear about them at this @varun_barad.</summary></entry><entry><title type="html">How to add “latest” post redirect to Jekyll site</title><link href="https://varunbarad.com/programming/web/2019/10/08/how-to-add-latest-post-redirect-to-jekyll-site.html" rel="alternate" type="text/html" title="How to add &quot;latest&quot; post redirect to Jekyll site" /><published>2019-10-08T12:00:00+05:30</published><updated>2019-10-08T12:00:00+05:30</updated><id>https://varunbarad.com/programming/web/2019/10/08/how-to-add-latest-post-redirect-to-jekyll-site</id><content type="html" xml:base="https://varunbarad.com/programming/web/2019/10/08/how-to-add-latest-post-redirect-to-jekyll-site.html">&lt;p&gt;I wanted to have a URL which I can give to someone and it would always take them to the latest post published on my blog. I ended up using &lt;a href=&quot;https://varunbarad.com/blog/latest&quot;&gt;https://varunbarad.com/blog/latest&lt;/a&gt; as the URL.&lt;/p&gt;

&lt;p&gt;Since my website is statically generated and hosted, it wasn’t an option for me to specify a server-side &lt;code class=&quot;highlighter-rouge&quot;&gt;30x&lt;/code&gt; redirect for that particular URL to my latest post.&lt;/p&gt;

&lt;p&gt;So what I ended up doing is generate a page on each build which would redirect user to the latest post using JS. To get the information about latest post, I made use of Jekyll’s Liquid templating &lt;em&gt;syntax&lt;/em&gt; (not sure what else to call it).&lt;/p&gt;

&lt;p&gt;So the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag of that page ended up looking like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
{%- assign latest_post = site.posts[0] -%}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Redirecting you to {{ latest_post.title }}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{{ latest_post.url }}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here I get the details of latest post by taking the first post in the list &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt;. AFAIK &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; is sorted in descending order by publishing date, so this approach fetches me the last published post.&lt;/p&gt;

&lt;p&gt;Then it is a simple matter of setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;window.location.href&lt;/code&gt; to the final url of the latest post.&lt;/p&gt;

&lt;p&gt;The final task remaining was to make sure that this page was compiled and generated exactly at &lt;code class=&quot;highlighter-rouge&quot;&gt;https://varunbarad.com/blog/latest&lt;/code&gt;. For that I specified a &lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: &quot;/blog/latest/&quot;&lt;/code&gt; in the front-matter for that page. That way Jekyll knows where to put the final generated HTML file for that page.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That was all, a simple way to add a URL to your Jekyll site which will always take the visitor to your latest blog post. You can take a look at the full source code of my website over at &lt;a href=&quot;https://github.com/VarunBarad/varunbarad.github.io/tree/development&quot;&gt;GitHub&lt;/a&gt; or you can also find the full code of this “latest post redirect” page at &lt;a href=&quot;https://github.com/VarunBarad/varunbarad.github.io/blob/development/latest-post-redirect.html&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to talk with me about anything related to this feel free to reach out to me on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">I wanted to have a URL which I can give to someone and it would always take them to the latest post published on my blog. I ended up using https://varunbarad.com/blog/latest as the URL. Since my website is statically generated and hosted, it wasn’t an option for me to specify a server-side 30x redirect for that particular URL to my latest post. So what I ended up doing is generate a page on each build which would redirect user to the latest post using JS. To get the information about latest post, I made use of Jekyll’s Liquid templating syntax (not sure what else to call it). So the &amp;lt;body&amp;gt; tag of that page ended up looking like this: &amp;lt;body&amp;gt; {%- assign latest_post = site.posts[0] -%} &amp;lt;p&amp;gt;Redirecting you to {{ latest_post.title }}&amp;lt;/p&amp;gt; &amp;lt;script&amp;gt; window.location.href = &quot;{{ latest_post.url }}&quot;; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; Here I get the details of latest post by taking the first post in the list site.posts. AFAIK site.posts is sorted in descending order by publishing date, so this approach fetches me the last published post. Then it is a simple matter of setting the window.location.href to the final url of the latest post. The final task remaining was to make sure that this page was compiled and generated exactly at https://varunbarad.com/blog/latest. For that I specified a permalink: &quot;/blog/latest/&quot; in the front-matter for that page. That way Jekyll knows where to put the final generated HTML file for that page. Conclusion That was all, a simple way to add a URL to your Jekyll site which will always take the visitor to your latest blog post. You can take a look at the full source code of my website over at GitHub or you can also find the full code of this “latest post redirect” page at this link. If you want to talk with me about anything related to this feel free to reach out to me on twitter @varun_barad</summary></entry><entry><title type="html">JavaScript 30 - Array Cardio 1</title><link href="https://varunbarad.com/programming/web/javascript-30/2019/10/03/javascript-30-array-cardio-1.html" rel="alternate" type="text/html" title="JavaScript 30 - Array Cardio 1" /><published>2019-10-03T12:00:00+05:30</published><updated>2019-10-03T12:00:00+05:30</updated><id>https://varunbarad.com/programming/web/javascript-30/2019/10/03/javascript-30-array-cardio-1</id><content type="html" xml:base="https://varunbarad.com/programming/web/javascript-30/2019/10/03/javascript-30-array-cardio-1.html">&lt;p&gt;Day 4 of &lt;a href=&quot;https://javascript30.com&quot;&gt;JS30 challenge&lt;/a&gt;, today I worked with various methods on array (I knew most of them beforehand) but I learned two cool things today.&lt;/p&gt;

&lt;p&gt;The key concepts I learned from today’s challenge were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Converting iterables to array in JS.&lt;/li&gt;
  &lt;li&gt;Displaying array of objects nicely formatted in console.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;converting-iterables-to-array-in-js&quot;&gt;Converting iterables to array in JS&lt;/h2&gt;

&lt;p&gt;As you might have observed that &lt;code class=&quot;highlighter-rouge&quot;&gt;document.querySelectorAll&lt;/code&gt; doesn’t return us an actual &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; but instead it returns us what is called as a &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt;. Consequently &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; doesn’t have all the methods that an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; does (like &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt; etc).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NodeList&lt;/code&gt; is an example of what we call as “iterable” in JS. So whenever working with iterables we tend to prefer to convert them to an actual &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; so that we have more options to work with.&lt;/p&gt;

&lt;p&gt;I already knew of one way to convert them:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anyIterable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;convertedArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anyIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we used the &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.from&lt;/code&gt; method to convert the iterable to an &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The other way I learned today was:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;anyIterable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;convertedArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;anyIterable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we made use of a combination of 2 things:&lt;/p&gt;

&lt;h4 id=&quot;1-es6-spread-operator-&quot;&gt;1. ES6 spread operator &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;When we prepend an iterable with &lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; (called the ES6 spread operator) what it does is it extracts all values from that iterable and replaces the &lt;code class=&quot;highlighter-rouge&quot;&gt;...anyIterable&lt;/code&gt; part of the expression with those values.&lt;/p&gt;
&lt;h4 id=&quot;2-array-literal-&quot;&gt;2. Array literal &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Then when we enclose the “spreaded” values with &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt; it converts the whole thing into an array containing all the values from that iterable.&lt;/p&gt;

&lt;p&gt;Both produce the same result. I don’t know if one performs better than the other under large data-sets. But even though the &lt;code class=&quot;highlighter-rouge&quot;&gt;[...anyIterable]&lt;/code&gt; way is more concise, to me the &lt;code class=&quot;highlighter-rouge&quot;&gt;Array.from(anyIterable)&lt;/code&gt; usage seems more readable.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s all folks, that was it for today. If you have anything unclear in this article or want to discuss anything else, hit me up on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Day 4 of JS30 challenge, today I worked with various methods on array (I knew most of them beforehand) but I learned two cool things today. The key concepts I learned from today’s challenge were: Converting iterables to array in JS. Displaying array of objects nicely formatted in console. Converting iterables to array in JS As you might have observed that document.querySelectorAll doesn’t return us an actual Array but instead it returns us what is called as a NodeList. Consequently NodeList doesn’t have all the methods that an Array does (like map, filter, reduce etc). NodeList is an example of what we call as “iterable” in JS. So whenever working with iterables we tend to prefer to convert them to an actual Array so that we have more options to work with. I already knew of one way to convert them: const anyIterable = document.querySelectorAll('a'); const convertedArray = Array.from(anyIterable); Here we used the Array.from method to convert the iterable to an Array. The other way I learned today was: const anyIterable = document.querySelectorAll('a'); const convertedArray = [...anyIterable]; Here we made use of a combination of 2 things: 1. ES6 spread operator ... When we prepend an iterable with ... (called the ES6 spread operator) what it does is it extracts all values from that iterable and replaces the ...anyIterable part of the expression with those values. 2. Array literal [] Then when we enclose the “spreaded” values with [ and ] it converts the whole thing into an array containing all the values from that iterable. Both produce the same result. I don’t know if one performs better than the other under large data-sets. But even though the [...anyIterable] way is more concise, to me the Array.from(anyIterable) usage seems more readable. Conclusion That’s all folks, that was it for today. If you have anything unclear in this article or want to discuss anything else, hit me up on twitter @varun_barad.</summary></entry><entry><title type="html">JavaScript 30 - CSS Variables</title><link href="https://varunbarad.com/programming/web/javascript-30/2019/10/02/javascript-30-css-variables.html" rel="alternate" type="text/html" title="JavaScript 30 - CSS Variables" /><published>2019-10-02T12:00:00+05:30</published><updated>2019-10-02T12:00:00+05:30</updated><id>https://varunbarad.com/programming/web/javascript-30/2019/10/02/javascript-30-css-variables</id><content type="html" xml:base="https://varunbarad.com/programming/web/javascript-30/2019/10/02/javascript-30-css-variables.html">&lt;p&gt;On my day 3 of &lt;a href=&quot;https://javascript30.com&quot;&gt;JS30 challenge&lt;/a&gt; I got introduced primarily to CSS variables but also to many other things.&lt;/p&gt;

&lt;p&gt;The key concepts I learned from today’s challenge were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CSS variables&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt; property on DOM elements&lt;/li&gt;
  &lt;li&gt;Image blur&lt;/li&gt;
  &lt;li&gt;Color input&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;css-variables&quot;&gt;CSS variables&lt;/h2&gt;

&lt;p&gt;CSS variables work very similar to how we use variables in JS or any other programming language. They let us define their value at one place and then just use that same value anywhere we refer to that variable.&lt;/p&gt;

&lt;p&gt;For example, we can define at one place that we want text on our website to be &lt;code class=&quot;highlighter-rouge&quot;&gt;white&lt;/code&gt; then we can define it like this&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;--text-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we define this &lt;code class=&quot;highlighter-rouge&quot;&gt;text-color&lt;/code&gt; variable at the root element. Now any place that we need to use this value we need to do something like&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--text-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CSS variables can be used for more than just colors. In today’s project we used these variables for storing the border thickness and color of an image and also for storing the blur amount for that image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; One fun idea I have with CSS variables is that I can define the color palette of my website at one place and then provide the user with a night-mode switch. I can change colors across the whole website by changing them at just one place.&lt;/p&gt;

&lt;p&gt;To modify their value via JS a simple method call does the trick.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'--text-color'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above snippet will change the value associated with &lt;code class=&quot;highlighter-rouge&quot;&gt;--text-color&lt;/code&gt; at any point in the &lt;code class=&quot;highlighter-rouge&quot;&gt;dom-element&lt;/code&gt; and any of &lt;code class=&quot;highlighter-rouge&quot;&gt;dom-element&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dataset-property-on-dom-elements&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt; property on DOM elements&lt;/h2&gt;

&lt;p&gt;In HTML whenever we want to write a custom-property on an element we make use of what are called &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; attributes. A sample can be like&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blur&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;range&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blur&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;max=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;25&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-sizing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;px&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-purpose=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A slider input to select blur amount&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have defined 2 data attributes, namely &lt;code class=&quot;highlighter-rouge&quot;&gt;data-sizing&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;data-purpose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now when we need to use these in JS we can simply do&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Used to access the data-sizing attribute.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Used to access the data-purpose attribute.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt; is a very simple property on DOM elements which lists all the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; attributes defined on that element.&lt;/p&gt;

&lt;h2 id=&quot;image-blur&quot;&gt;Image blur&lt;/h2&gt;

&lt;p&gt;Today I learnt a nifty simple trick to blur an image using only CSS.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can just specify a &lt;code class=&quot;highlighter-rouge&quot;&gt;blur&lt;/code&gt; CSS filter and our work is done. There are lots of other functions available which can be used as &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, do make sure to take a look at that list.&lt;/p&gt;

&lt;h2 id=&quot;color-input&quot;&gt;Color input&lt;/h2&gt;

&lt;p&gt;Standardisation of HTML and CSS has made it easy to create a simple and functional color-picker. The only thing that needs to be done is&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;base&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#43bc46&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have just declared an input tag which then takes care of displaying a color picker and also shows the user with a tiny sample of the color they have picked.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s all folks, that was it for today. If you have anything unclear in this article or want to discuss anything else, hit me up on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">On my day 3 of JS30 challenge I got introduced primarily to CSS variables but also to many other things. The key concepts I learned from today’s challenge were: CSS variables dataset property on DOM elements Image blur Color input CSS variables CSS variables work very similar to how we use variables in JS or any other programming language. They let us define their value at one place and then just use that same value anywhere we refer to that variable. For example, we can define at one place that we want text on our website to be white then we can define it like this :root { --text-color: white; } Here we define this text-color variable at the root element. Now any place that we need to use this value we need to do something like .content { color: var(--text-color); } CSS variables can be used for more than just colors. In today’s project we used these variables for storing the border thickness and color of an image and also for storing the blur amount for that image. Note: One fun idea I have with CSS variables is that I can define the color palette of my website at one place and then provide the user with a night-mode switch. I can change colors across the whole website by changing them at just one place. To modify their value via JS a simple method call does the trick. &amp;lt;dom-element&amp;gt;.style.setProperty('--text-color', 'red'); The above snippet will change the value associated with --text-color at any point in the dom-element and any of dom-element. dataset property on DOM elements In HTML whenever we want to write a custom-property on an element we make use of what are called data attributes. A sample can be like &amp;lt;input id=&quot;blur&quot; type=&quot;range&quot; name=&quot;blur&quot; min=&quot;0&quot; max=&quot;25&quot; value=&quot;5&quot; data-sizing=&quot;px&quot; data-purpose=&quot;A slider input to select blur amount&quot;&amp;gt; Here we have defined 2 data attributes, namely data-sizing and data-purpose. Now when we need to use these in JS we can simply do console.log(inputElement.dataset.sizing); // Used to access the data-sizing attribute. console.log(inputElement.dataset.purpose); // Used to access the data-purpose attribute. dataset is a very simple property on DOM elements which lists all the data attributes defined on that element. Image blur Today I learnt a nifty simple trick to blur an image using only CSS. img { filter: blur(5px); } We can just specify a blur CSS filter and our work is done. There are lots of other functions available which can be used as filter, do make sure to take a look at that list. Color input Standardisation of HTML and CSS has made it easy to create a simple and functional color-picker. The only thing that needs to be done is &amp;lt;input id=&quot;base&quot; type=&quot;color&quot; name=&quot;base&quot; value=&quot;#43bc46&quot;&amp;gt; Here we have just declared an input tag which then takes care of displaying a color picker and also shows the user with a tiny sample of the color they have picked. Conclusion That’s all folks, that was it for today. If you have anything unclear in this article or want to discuss anything else, hit me up on twitter @varun_barad.</summary></entry><entry><title type="html">JavaScript 30 - CSS Analog Clock</title><link href="https://varunbarad.com/programming/web/javascript-30/2019/10/01/javascript-30-css-analog-clock.html" rel="alternate" type="text/html" title="JavaScript 30 - CSS Analog Clock" /><published>2019-10-01T12:00:00+05:30</published><updated>2019-10-01T12:00:00+05:30</updated><id>https://varunbarad.com/programming/web/javascript-30/2019/10/01/javascript-30-css-analog-clock</id><content type="html" xml:base="https://varunbarad.com/programming/web/javascript-30/2019/10/01/javascript-30-css-analog-clock.html">&lt;p&gt;Today I am continuing my work on &lt;a href=&quot;https://javascript30.com&quot;&gt;JS30 challenge&lt;/a&gt; and building a simple analog clock using CSS shapes and then animate it with CSS transforms timed using JS.&lt;/p&gt;

&lt;p&gt;The key concepts I learned from today’s challenge were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Changing rotation center of an object in CSS&lt;/li&gt;
  &lt;li&gt;CSS Transition timing function&lt;/li&gt;
  &lt;li&gt;A weird reverse-jump in animation whenever any clock hand crosses 12 o’clock mark.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;changing-rotation-center-of-an-object-in-css&quot;&gt;Changing rotation center of an object in CSS&lt;/h2&gt;

&lt;p&gt;By default an object in CSS rotates around its center. But in our clock we need to rotate them around one of their corners. Therefore we need to change their CSS origins&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transform-origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above snippet moves the origin point for all CSS transforms to the right end of that element.&lt;/p&gt;

&lt;h2 id=&quot;css-transition-timing-function&quot;&gt;CSS Transition timing function&lt;/h2&gt;

&lt;p&gt;You can provide a timing function for your CSS transitions so that they follow it for their rate of change during the duration of your transitions.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transition-timing-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ease-in-out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There are many built-in transition timing functions but I generally liked the &lt;code class=&quot;highlighter-rouge&quot;&gt;ease-in-out&lt;/code&gt; for how its acceleration and deceleration feel much like natural movements. You can check out the rest of them if you like.&lt;/p&gt;

&lt;p&gt;My favorite ability in this was that we can provide our custom timing functions using what is known as a bezier curve specification. For example:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;transition-timing-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cubic-bezier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.58&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code-sample I have written the &lt;code class=&quot;highlighter-rouge&quot;&gt;cubic-bezier&lt;/code&gt; format of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ease-in-out&lt;/code&gt; timing function but you can customize the bezier curve to your heart’s content using those 2 anchor points.&lt;/p&gt;

&lt;h1 id=&quot;a-weird-reverse-jump-in-animation-whenever-any-clock-hand-crosses-12-oclock-mark&quot;&gt;A weird reverse-jump in animation whenever any clock hand crosses 12 o’clock mark&lt;/h1&gt;

&lt;p&gt;The hands of my clock were moving nicely from 12 to 12 but when they were just going to reach 12 they would do a weird jump and instead of moving 1 tick forward from right before 12 to 12, they would perform a full reverse circle and reach 12 from that side.&lt;/p&gt;

&lt;p&gt;This problem was occurring because of how we calculated the angles of rotation. We used the below equation for counting number of seconds.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondsDegrees&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;seconds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;360&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Here 90 degrees is the initial offset to make clock-hands start at 12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this what would happen is as below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Seconds&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Degrees&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;30&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;45&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60 (or 0)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So the main issue is that when reaching the 60 second mark it rotates counter-clockwise because the final value of clock-hand handle (90) is less than its current value (360). So instead of the transition being a smooth forward transition, it jumps counter-clockwise and that’s where we see that queer problem.&lt;/p&gt;

&lt;p&gt;A very quick way to deal with this is to keep the degrees calculation so that they are always increasing. The result with that would be something like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Seconds&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Degrees&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;180&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;30&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;270&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;45&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60 (or 0)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;450&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you want to discuss anything that was unclear in today’s article then hit me up on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Today I am continuing my work on JS30 challenge and building a simple analog clock using CSS shapes and then animate it with CSS transforms timed using JS. The key concepts I learned from today’s challenge were: Changing rotation center of an object in CSS CSS Transition timing function A weird reverse-jump in animation whenever any clock hand crosses 12 o’clock mark. Changing rotation center of an object in CSS By default an object in CSS rotates around its center. But in our clock we need to rotate them around one of their corners. Therefore we need to change their CSS origins .hand { transform-origin: 100%; } The above snippet moves the origin point for all CSS transforms to the right end of that element. CSS Transition timing function You can provide a timing function for your CSS transitions so that they follow it for their rate of change during the duration of your transitions. .hand { transition-timing-function: ease-in-out; } There are many built-in transition timing functions but I generally liked the ease-in-out for how its acceleration and deceleration feel much like natural movements. You can check out the rest of them if you like. My favorite ability in this was that we can provide our custom timing functions using what is known as a bezier curve specification. For example: .hand { transition-timing-function: cubic-bezier(0.42, 0.0, 0.58, 1.0); } In the above code-sample I have written the cubic-bezier format of the ease-in-out timing function but you can customize the bezier curve to your heart’s content using those 2 anchor points. A weird reverse-jump in animation whenever any clock hand crosses 12 o’clock mark The hands of my clock were moving nicely from 12 to 12 but when they were just going to reach 12 they would do a weird jump and instead of moving 1 tick forward from right before 12 to 12, they would perform a full reverse circle and reach 12 from that side. This problem was occurring because of how we calculated the angles of rotation. We used the below equation for counting number of seconds. const secondsDegrees = ((seconds / 60) * 360) + 90; // Here 90 degrees is the initial offset to make clock-hands start at 12 With this what would happen is as below: Seconds Degrees 0 90 15 180 30 270 45 360 60 (or 0) 90 So the main issue is that when reaching the 60 second mark it rotates counter-clockwise because the final value of clock-hand handle (90) is less than its current value (360). So instead of the transition being a smooth forward transition, it jumps counter-clockwise and that’s where we see that queer problem. A very quick way to deal with this is to keep the degrees calculation so that they are always increasing. The result with that would be something like this: Seconds Degrees 0 90 15 180 30 270 45 360 60 (or 0) 450 Conclusion If you want to discuss anything that was unclear in today’s article then hit me up on twitter @varun_barad.</summary></entry><entry><title type="html">JavaScript 30 - Building a Drum Kit</title><link href="https://varunbarad.com/programming/web/javascript-30/2019/09/30/javascript-30-building-a-drum-kit.html" rel="alternate" type="text/html" title="JavaScript 30 - Building a Drum Kit" /><published>2019-09-30T12:00:00+05:30</published><updated>2019-09-30T12:00:00+05:30</updated><id>https://varunbarad.com/programming/web/javascript-30/2019/09/30/javascript-30-building-a-drum-kit</id><content type="html" xml:base="https://varunbarad.com/programming/web/javascript-30/2019/09/30/javascript-30-building-a-drum-kit.html">&lt;p&gt;&lt;a href=&quot;https://wesbos.com&quot; target=&quot;_blank&quot;&gt;Wes Bos&lt;/a&gt; has created a &lt;a href=&quot;https://javascript30.com&quot; target=&quot;_blank&quot;&gt;course&lt;/a&gt; to get you confident in your JS skills in 30 days. In it you work on a new project daily for 30 days and in each project you make something using vanilla JS without any frameworks or libraries.&lt;/p&gt;

&lt;p&gt;Today I started the challenge and first project was to make a drum-kit where different sounds are played based on the keyboard button you press. And the corresponding button gets highlighted on screen.&lt;/p&gt;

&lt;p&gt;The key concepts I learned from today’s challenge were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Setting event-listeners with JS&lt;/li&gt;
  &lt;li&gt;Working with keyboard events and identifying key-codes&lt;/li&gt;
  &lt;li&gt;Playing audio and restarting the audio when it is already playing&lt;/li&gt;
  &lt;li&gt;How to sync JS code with CSS transitions&lt;/li&gt;
  &lt;li&gt;What value &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; takes inside the event listener function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setting-event-listeners-with-js&quot;&gt;Setting event-listeners with JS&lt;/h2&gt;

&lt;p&gt;The syntax for this is very simple&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;event-name&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can find a list of supported events &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; but beware, the complete list of events is too large and you might never need to use most of them.&lt;/p&gt;

&lt;h2 id=&quot;working-with-keyboard-events-and-identifying-key-codes&quot;&gt;Working with keyboard events and identifying key-codes&lt;/h2&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleKeyDownEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'keydown'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleKeyDownEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we attach an event-listener for the &lt;code class=&quot;highlighter-rouge&quot;&gt;keydown&lt;/code&gt; event to the &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; object since we want to capture the events across our whole web-page.
Then we find out which key was pressed based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; value passed via the fired event.&lt;/p&gt;

&lt;p&gt;Wes has created a &lt;a href=&quot;https://keycode.info&quot; target=&quot;_blank&quot;&gt;nifty little website (https://keycode.info)&lt;/a&gt; which we can use to find the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; for any key.&lt;/p&gt;

&lt;h2 id=&quot;playing-audio-and-restarting-the-audio-when-it-is-already-playing&quot;&gt;Playing audio and restarting the audio when it is already playing&lt;/h2&gt;

&lt;p&gt;In this project we have a set of buttons on the screen corresponding to different keys on the keyboard. And each button has a corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element on the page. The goal is to play the corresponding audio when a valid key is pressed on the keyboard.&lt;/p&gt;

&lt;p&gt;So after detecting which key is pressed using the &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; attribute, we select the corresponding &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element using a pre-specified &lt;code class=&quot;highlighter-rouge&quot;&gt;data-key&lt;/code&gt; attribute in HTML and call the &lt;code class=&quot;highlighter-rouge&quot;&gt;audioElement.play();&lt;/code&gt; method on it.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;audioElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`audio[data-key=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;]`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;audioElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;audioElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;play&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the above code-block you might have observed that I set the &lt;code class=&quot;highlighter-rouge&quot;&gt;current-time&lt;/code&gt; of that element to &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; before calling &lt;code class=&quot;highlighter-rouge&quot;&gt;play&lt;/code&gt; on it. This is done because when an &lt;code class=&quot;highlighter-rouge&quot;&gt;audio&lt;/code&gt; is still playing (that is it has not finished) and we call &lt;code class=&quot;highlighter-rouge&quot;&gt;.play()&lt;/code&gt; on it, this new call gets ignored. Therefore we reset the play-time for that particular audio element so that it correctly registers and plays 2 consecutive commands of the same key.&lt;/p&gt;

&lt;h2 id=&quot;how-to-sync-js-code-with-css-transitions&quot;&gt;How to sync JS code with CSS transitions&lt;/h2&gt;

&lt;p&gt;When a key is pressed, we highlight the corresponding button for a short duration on the screen while playing sound for it. To highlight the button, we just add a class &lt;code class=&quot;highlighter-rouge&quot;&gt;playing&lt;/code&gt; to it which scales it up and changes the border a bit. The second part of that is to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;playing&lt;/code&gt; class as soon as the transition is finished so as to return the button to normal state.&lt;/p&gt;

&lt;p&gt;For this I initially thought of using &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; with the same time-out as that mentioned in CSS as transition duration. Wes pointed out the flaw in it is that when we decide to update the transition duration we would need to make sure to update it in both the places (in CSS and in JS).&lt;/p&gt;

&lt;p&gt;So a better way to synchronize CSS transitions with JS is again to use &lt;strong&gt;events&lt;/strong&gt;. Here we specifically use &lt;code class=&quot;highlighter-rouge&quot;&gt;transitionend&lt;/code&gt; event on the buttons like below.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeButtonHighlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propertyName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'transform'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'playing'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.keys'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'transitionend'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;removeButtonHighlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In above code, we select each button and then add the &lt;code class=&quot;highlighter-rouge&quot;&gt;transitionend&lt;/code&gt; event-listener for it so now it will call &lt;code class=&quot;highlighter-rouge&quot;&gt;removeButtonHighlight&lt;/code&gt; only and exactly when any transition on any of those buttons ends.&lt;/p&gt;

&lt;p&gt;After that we simply remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;playing&lt;/code&gt; class from that button so that it returns back to its original/normal state. You might have noticed that I have put a check of &lt;code class=&quot;highlighter-rouge&quot;&gt;event.propertyName === 'transform'&lt;/code&gt;. I would suggest you try and remove that check and &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; the event to find out why I might have put that check in.&lt;/p&gt;

&lt;h2 id=&quot;what-value-this-takes-inside-the-event-listener-function&quot;&gt;What value &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; takes inside the event-listener function&lt;/h2&gt;

&lt;p&gt;One of the toughest concept to learn and correctly understand in JS is &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; or more specifically, what &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; means at different points of execution in our code.&lt;/p&gt;

&lt;p&gt;In the last code-block you have noticed that I simply did &lt;code class=&quot;highlighter-rouge&quot;&gt;this.classList.remove('playing')&lt;/code&gt; instead of trying to select that particular element using any other method.&lt;/p&gt;

&lt;p&gt;It is so because in that particular case the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is whatever object the function &lt;code class=&quot;highlighter-rouge&quot;&gt;removeButtonHighlight&lt;/code&gt; has been called.&lt;/p&gt;

&lt;p&gt;So when we attach an event-listener on each of our button and on triggering of those events, they call &lt;code class=&quot;highlighter-rouge&quot;&gt;removeButtonHighlight&lt;/code&gt; with the context of that particular button. So there &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; is referring directly to the button on which the event listener has been triggered.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hope I have been able to explain what I learned in today’s challenge. Hit me up on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot; target=&quot;_blank&quot;&gt;@varun_barad&lt;/a&gt; in case you haven’t understood something from this article or you have something new for me to learn.&lt;/p&gt;

&lt;p&gt;In any case, don’t forget to check out the &lt;a href=&quot;https://javascript30.com&quot; target=&quot;_blank&quot;&gt;JavaScript30 challenge&lt;/a&gt; from Wes Bos. It is an awesome way to get some JS confidence.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Wes Bos has created a course to get you confident in your JS skills in 30 days. In it you work on a new project daily for 30 days and in each project you make something using vanilla JS without any frameworks or libraries. Today I started the challenge and first project was to make a drum-kit where different sounds are played based on the keyboard button you press. And the corresponding button gets highlighted on screen. The key concepts I learned from today’s challenge were: Setting event-listeners with JS Working with keyboard events and identifying key-codes Playing audio and restarting the audio when it is already playing How to sync JS code with CSS transitions What value this takes inside the event listener function Setting event-listeners with JS The syntax for this is very simple &amp;lt;target-element&amp;gt;.addEventListener('&amp;lt;event-name&amp;gt;', &amp;lt;function-to-call-when-event-is-fired&amp;gt;); You can find a list of supported events here but beware, the complete list of events is too large and you might never need to use most of them. Working with keyboard events and identifying key-codes function handleKeyDownEvent(event) { console.log(event.keyCode); } window.addEventListener('keydown', handleKeyDownEvent); Here we attach an event-listener for the keydown event to the window object since we want to capture the events across our whole web-page. Then we find out which key was pressed based on the keyCode value passed via the fired event. Wes has created a nifty little website (https://keycode.info) which we can use to find the corresponding keyCode for any key. Playing audio and restarting the audio when it is already playing In this project we have a set of buttons on the screen corresponding to different keys on the keyboard. And each button has a corresponding &amp;lt;audio&amp;gt; element on the page. The goal is to play the corresponding audio when a valid key is pressed on the keyboard. So after detecting which key is pressed using the keyCode attribute, we select the corresponding &amp;lt;audio&amp;gt; element using a pre-specified data-key attribute in HTML and call the audioElement.play(); method on it. let audioElement = document.querySelector(`audio[data-key=&quot;${keyCode}&quot;]`); audioElement.currentTime = 0; audioElement.play(); In the above code-block you might have observed that I set the current-time of that element to 0 before calling play on it. This is done because when an audio is still playing (that is it has not finished) and we call .play() on it, this new call gets ignored. Therefore we reset the play-time for that particular audio element so that it correctly registers and plays 2 consecutive commands of the same key. How to sync JS code with CSS transitions When a key is pressed, we highlight the corresponding button for a short duration on the screen while playing sound for it. To highlight the button, we just add a class playing to it which scales it up and changes the border a bit. The second part of that is to remove the playing class as soon as the transition is finished so as to return the button to normal state. For this I initially thought of using setTimeout with the same time-out as that mentioned in CSS as transition duration. Wes pointed out the flaw in it is that when we decide to update the transition duration we would need to make sure to update it in both the places (in CSS and in JS). So a better way to synchronize CSS transitions with JS is again to use events. Here we specifically use transitionend event on the buttons like below. function removeButtonHighlight(event) { if (event.propertyName === 'transform') { this.classList.remove('playing'); } } document.querySelectorAll('.keys').forEach(button =&amp;gt; { button.addEventListener('transitionend', removeButtonHighlight); }); In above code, we select each button and then add the transitionend event-listener for it so now it will call removeButtonHighlight only and exactly when any transition on any of those buttons ends. After that we simply remove the playing class from that button so that it returns back to its original/normal state. You might have noticed that I have put a check of event.propertyName === 'transform'. I would suggest you try and remove that check and console.log the event to find out why I might have put that check in. What value this takes inside the event-listener function One of the toughest concept to learn and correctly understand in JS is this or more specifically, what this means at different points of execution in our code. In the last code-block you have noticed that I simply did this.classList.remove('playing') instead of trying to select that particular element using any other method. It is so because in that particular case the value of this is whatever object the function removeButtonHighlight has been called. So when we attach an event-listener on each of our button and on triggering of those events, they call removeButtonHighlight with the context of that particular button. So there this is referring directly to the button on which the event listener has been triggered. Conclusion Hope I have been able to explain what I learned in today’s challenge. Hit me up on twitter @varun_barad in case you haven’t understood something from this article or you have something new for me to learn. In any case, don’t forget to check out the JavaScript30 challenge from Wes Bos. It is an awesome way to get some JS confidence.</summary></entry><entry><title type="html">Switching RxJava schedulers between app code and corresponding tests</title><link href="https://varunbarad.com/programming/rx-java/2019/08/16/switching-rxjava-schedulers-between-app-code-and-corresponding-tests.html" rel="alternate" type="text/html" title="Switching RxJava schedulers between app code and corresponding tests" /><published>2019-08-16T12:00:00+05:30</published><updated>2019-08-16T12:00:00+05:30</updated><id>https://varunbarad.com/programming/rx-java/2019/08/16/switching-rxjava-schedulers-between-app-code-and-corresponding-tests</id><content type="html" xml:base="https://varunbarad.com/programming/rx-java/2019/08/16/switching-rxjava-schedulers-between-app-code-and-corresponding-tests.html">&lt;p&gt;When using RxJava we need to specify the schedulers which we want to use to 1) perform the given task and 2) return result of the operation chain.&lt;/p&gt;

&lt;p&gt;One of the interesting ways I found while working on a take-home challenge for a company was as below:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VarunSchedulers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enableTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;disableTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RxSchedulers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trampoline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trampoline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trampoline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Scheduler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s take the example of fetching a network query, we can simply do this&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pandaService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCutestPanda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarunSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VarunSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And when we write our unit-tests we can easily turn testing-mode on and off using the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@After&lt;/code&gt; methods.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeTestClass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setupTests&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VarunSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;@After&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tearDown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VarunSchedulers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disableTesting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Write your tests
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now whenever we are inside tests, then automatically the &lt;code class=&quot;highlighter-rouge&quot;&gt;trampoline&lt;/code&gt; schedulers are assigned and respectively appropriate schedulers by default in case we are not in tests.&lt;/p&gt;

&lt;p&gt;If you have more such tricks up your sleeve or something in here isn’t clear to you or you just want to chat then hit me up on twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">When using RxJava we need to specify the schedulers which we want to use to 1) perform the given task and 2) return result of the operation chain. One of the interesting ways I found while working on a take-home challenge for a company was as below: object VarunSchedulers { private var schedulers: RxSchedulers = RxSchedulers.Default fun enableTesting() { this.schedulers = RxSchedulers.Test } fun disableTesting() { this.schedulers = RxSchedulers.Default } fun io(): Scheduler = this.schedulers.io() fun computation(): Scheduler = this.schedulers.computation() fun main(): Scheduler = this.schedulers.main() private sealed class RxSchedulers { abstract fun io(): Scheduler abstract fun computation(): Scheduler abstract fun main(): Scheduler object Test : RxSchedulers() { override fun io(): Scheduler = Schedulers.trampoline() override fun computation(): Scheduler = Schedulers.trampoline() override fun main(): Scheduler = Schedulers.trampoline() } object Default : RxSchedulers() { override fun io(): Scheduler = Schedulers.io() override fun computation(): Scheduler = Schedulers.computation() override fun main(): Scheduler = AndroidSchedulers.mainThread() } } } Now let’s take the example of fetching a network query, we can simply do this pandaService.getCutestPanda() .subscribeOn(VarunSchedulers.io()) .observeOn(VarunSchedulers.main()) ... And when we write our unit-tests we can easily turn testing-mode on and off using the @Before and @After methods. class SomeTestClass { @Before fun setupTests() { VarunSchedulers.enableTesting() } @After fun tearDown() { VarunSchedulers.disableTesting() } // Write your tests } Now whenever we are inside tests, then automatically the trampoline schedulers are assigned and respectively appropriate schedulers by default in case we are not in tests. If you have more such tricks up your sleeve or something in here isn’t clear to you or you just want to chat then hit me up on twitter @varun_barad.</summary></entry><entry><title type="html">Make git forget a tracked file</title><link href="https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file.html" rel="alternate" type="text/html" title="Make git forget a tracked file" /><published>2019-06-06T12:00:00+05:30</published><updated>2019-06-06T12:00:00+05:30</updated><id>https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file</id><content type="html" xml:base="https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file.html">&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file generated by Android Studio’s “New Project” wizard keeps some local IDE configuration files in VCS tracking. Nowadays I tweak the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file immediately after creating a new project, so as to avoid getting those files tracked.&lt;/p&gt;

&lt;p&gt;But last week I opened one of my old projects and I hadn’t made those modifications to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; back then, so it was tracking those files. I wanted git to stop tracking those files but still wanted to keep them in my file-system.&lt;/p&gt;

&lt;p&gt;So I went searching how to do it and found the below method.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Commit/Stash all your other changes&lt;/li&gt;
  &lt;li&gt;Add that file to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Commit the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; changes&lt;/li&gt;
  &lt;li&gt;Execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt; (For each file that you want to remove from tracking)&lt;/li&gt;
  &lt;li&gt;Commit the removal of those files from VCS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Word of caution:&lt;/strong&gt; This will keep the files in your directory but the next time these changes are pulled on some other machine, the removed files will be deleted from that machine. So it is advised to make a copy of those files first before pulling and then pasting your copied files back.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/1274447&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was just a quick tip that I needed recently and thought of sharing. If you have any more such tips I would love to hear about them at this &lt;a href=&quot;https://twitter.com/varun_barad/status/1136608795973603332&quot;&gt;twitter thread&lt;/a&gt;. Feel free to contact me for anything else that you would like to talk about &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">The default .gitignore file generated by Android Studio’s “New Project” wizard keeps some local IDE configuration files in VCS tracking. Nowadays I tweak the .gitignore file immediately after creating a new project, so as to avoid getting those files tracked. But last week I opened one of my old projects and I hadn’t made those modifications to the .gitignore back then, so it was tracking those files. I wanted git to stop tracking those files but still wanted to keep them in my file-system. So I went searching how to do it and found the below method. Commit/Stash all your other changes Add that file to your .gitignore Commit the .gitignore changes Execute the command git rm --cached &amp;lt;file&amp;gt; (For each file that you want to remove from tracking) Commit the removal of those files from VCS. Word of caution: This will keep the files in your directory but the next time these changes are pulled on some other machine, the removed files will be deleted from that machine. So it is advised to make a copy of those files first before pulling and then pasting your copied files back. Source: Stackoverflow This was just a quick tip that I needed recently and thought of sharing. If you have any more such tips I would love to hear about them at this twitter thread. Feel free to contact me for anything else that you would like to talk about @varun_barad.</summary></entry><entry><title type="html">Testing Deep-Link URLs using ADB</title><link href="https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb.html" rel="alternate" type="text/html" title="Testing Deep-Link URLs using ADB" /><published>2019-05-02T12:00:00+05:30</published><updated>2019-05-02T12:00:00+05:30</updated><id>https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb</id><content type="html" xml:base="https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb.html">&lt;p&gt;ADB is a treasure trove and I regularly keep finding some gem from it. Recently I was working on creating some new deep-link integrations for the company I work at. The below command fires an event similar to one that gets fired when we click on a link in the device itself.&lt;/p&gt;

&lt;p&gt;The pattern for command to trigger the deep-link is as below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; android.intent.action.VIEW &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-link-goes-inside-these-quotes&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; android.intent.action.VIEW &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://varunbarad.com/blog&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was just a quick ADB tip that I have learnt and wanted to share with you. If you have any more such tips or tricks, I would love to hear about them on &lt;a href=&quot;https://twitter.com/varun_barad/status/1123999186574303234&quot;&gt;twitter thread for this article&lt;/a&gt;. Feel free to contact me for anything else that you would like to talk about &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">ADB is a treasure trove and I regularly keep finding some gem from it. Recently I was working on creating some new deep-link integrations for the company I work at. The below command fires an event similar to one that gets fired when we click on a link in the device itself. The pattern for command to trigger the deep-link is as below: adb shell am start -a android.intent.action.VIEW -d &quot;your-link-goes-inside-these-quotes&quot; Example adb shell am start -a android.intent.action.VIEW -d &quot;https://varunbarad.com/blog&quot; This was just a quick ADB tip that I have learnt and wanted to share with you. If you have any more such tips or tricks, I would love to hear about them on twitter thread for this article. Feel free to contact me for anything else that you would like to talk about @varun_barad.</summary></entry></feed>