<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://varunbarad.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://varunbarad.com/" rel="alternate" type="text/html" /><updated>2019-06-06T18:24:48+05:30</updated><id>https://varunbarad.com/feed.xml</id><title type="html">Varun Barad - Curious Developer</title><subtitle>My online home where I post about new things I learn or find interesting.</subtitle><author><name>Varun Barad</name></author><entry><title type="html">Make git forget a tracked file</title><link href="https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file.html" rel="alternate" type="text/html" title="Make git forget a tracked file" /><published>2019-06-06T12:00:00+05:30</published><updated>2019-06-06T12:00:00+05:30</updated><id>https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file</id><content type="html" xml:base="https://varunbarad.com/programming/2019/06/06/make-git-forget-a-tracked-file.html">&lt;p&gt;What to do when you are tracking a file with git but then want to remove it from VCS while keeping it in your file system.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;The default &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file generated by Android Studio’s “New Project” wizard keeps some local IDE configuration files in VCS tracking. Nowadays I tweak the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file immediately after creating a new project, so as to avoid getting those files tracked.&lt;/p&gt;

&lt;p&gt;But last week I opened one of my old projects and I hadn’t made those modifications to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; back then, so it was tracking those files. I wanted git to stop tracking those files but still wanted to keep them in my file-system.&lt;/p&gt;

&lt;p&gt;So I went searching how to do it and found the below method.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Commit/Stash all your other changes&lt;/li&gt;
  &lt;li&gt;Add that file to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Commit the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; changes&lt;/li&gt;
  &lt;li&gt;Execute the command &lt;code class=&quot;highlighter-rouge&quot;&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt; (For each file that you want to remove from tracking)&lt;/li&gt;
  &lt;li&gt;Commit the removal of those files from VCS.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Word of caution:&lt;/strong&gt; This will keep the files in your directory but the next time these changes are pulled on some other machine, the removed files will be deleted from that machine. So it is advised to make a copy of those files first before pulling and then pasting your copied files back.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/1274447&quot;&gt;Stackoverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was just a quick tip that I needed recently and thought of sharing. If you have any more such tips I would love to hear about them at this &lt;a href=&quot;https://twitter.com/varun_barad/status/1136608795973603332&quot;&gt;twitter thread&lt;/a&gt;. Feel free to contact me for anything else that you would like to talk about &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">What to do when you are tracking a file with git but then want to remove it from VCS while keeping it in your file system.</summary></entry><entry><title type="html">Testing Deep-Link URLs using ADB</title><link href="https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb.html" rel="alternate" type="text/html" title="Testing Deep-Link URLs using ADB" /><published>2019-05-02T12:00:00+05:30</published><updated>2019-05-02T12:00:00+05:30</updated><id>https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb</id><content type="html" xml:base="https://varunbarad.com/android/2019/05/02/testing-deep-link-urls-using-adb.html">&lt;p&gt;Simple adb command to help you fire deep-link url in mobile from your console.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;ADB is a treasure trove and I regularly keep finding some gem from it. Recently I was working on creating some new deep-link integrations for the company I work at. The below command fires an event similar to one that gets fired when we click on a link in the device itself.&lt;/p&gt;

&lt;p&gt;The pattern for command to trigger the deep-link is as below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; android.intent.action.VIEW &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;your-link-goes-inside-these-quotes&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Example&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell am start &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; android.intent.action.VIEW &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://varunbarad.com/blog&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This was just a quick ADB tip that I have learnt and wanted to share with you. If you have any more such tips or tricks, I would love to hear about them on &lt;a href=&quot;https://twitter.com/varun_barad/status/1123999186574303234&quot;&gt;twitter thread for this article&lt;/a&gt;. Feel free to contact me for anything else that you would like to talk about &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Simple adb command to help you fire deep-link url in mobile from your console.</summary></entry><entry><title type="html">HTTP Network Requests on Android Pie</title><link href="https://varunbarad.com/android/2019/04/07/http-network-requests-on-android-pie.html" rel="alternate" type="text/html" title="HTTP Network Requests on Android Pie" /><published>2019-04-07T12:00:00+05:30</published><updated>2019-04-07T12:00:00+05:30</updated><id>https://varunbarad.com/android/2019/04/07/http-network-requests-on-android-pie</id><content type="html" xml:base="https://varunbarad.com/android/2019/04/07/http-network-requests-on-android-pie.html">&lt;p&gt;Android Pie only allows HTTPS traffic by default &amp;amp; blocks all HTTP requests. You can enable HTTP communication for your API endpoints once you have configured this little thing.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;Recently when I started work on a new app for my company I noticed that all of my requests were being rejected before even reaching the server. This was a problem I was facing only on the emulator and not on the Nexus 5 I had for physical testing. I searched on the Internet a bit and found out that Android Pie has disabled cleartext network traffic by default.&lt;/p&gt;

&lt;p&gt;I found 2 solutions for this. You can either enable cleartext traffic from your app for specific domains or you can set it for all the domains.&lt;/p&gt;

&lt;h2 id=&quot;enabling-cleartext-traffic-for-all-domains-discouraged-due-to-being-less-secure&quot;&gt;Enabling cleartext traffic for all domains (discouraged due to being less secure)&lt;/h2&gt;

&lt;p&gt;Add this attribute to the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;application&amp;gt;&lt;/code&gt; tag in your &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android:usesCleartextTraffic=&quot;true&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will enable app-wide cleartext traffic for any and all domains to which your app makes a request.&lt;/p&gt;

&lt;p&gt;This is discouraged as you don’t specifically allow only the domains that require cleartext.&lt;/p&gt;

&lt;h2 id=&quot;enabling-http-requests-for-specific-domains-go-for-this-one-if-you-can&quot;&gt;Enabling HTTP requests for specific domains (go for this one if you can)&lt;/h2&gt;

&lt;p&gt;You first need to create a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;network_security_config.xml&lt;/code&gt; file inside your &lt;code class=&quot;highlighter-rouge&quot;&gt;res/xml&lt;/code&gt; directory. The file contents should be as below&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;network-security-config&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;domain-config&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cleartextTrafficPermitted=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;domain&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;includeSubdomains=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;example-domain.com&lt;span class=&quot;nt&quot;&gt;&amp;lt;/domain&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/domain-config&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/network-security-config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You need to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;example-domain.com&lt;/code&gt; with the domain for which you want to enable http traffic. If you want to enable http for more than one domains then add relevant &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;domain&amp;gt;&lt;/code&gt; tags for each.&lt;/p&gt;

&lt;p&gt;Then you need to specify this file in your &lt;code class=&quot;highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; as below:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;application&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:networkSecurityConfig=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@xml/network_security_config&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h2&gt;

&lt;p&gt;I faced this issue at work and now I am writing about it so others (and also me) can benefit from it in future. If you have more such ideas/examples or any other suggestions  under the sky, &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Android Pie only allows HTTPS traffic by default &amp;amp; blocks all HTTP requests. You can enable HTTP communication for your API endpoints once you have configured this little thing.</summary></entry><entry><title type="html">Don’t worry about specializing yet!</title><link href="https://varunbarad.com/programming/personal-growth/2019/03/19/dont-worry-about-specializing-yet.html" rel="alternate" type="text/html" title="Don't worry about specializing yet!" /><published>2019-03-19T12:00:00+05:30</published><updated>2019-03-19T12:00:00+05:30</updated><id>https://varunbarad.com/programming/personal-growth/2019/03/19/dont-worry-about-specializing-yet</id><content type="html" xml:base="https://varunbarad.com/programming/personal-growth/2019/03/19/dont-worry-about-specializing-yet.html">&lt;p&gt;What technologies should I be learning, so that they prove helpful in my career?&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;In the past 4 years of my life, many people who are just starting out in programming world have asked me some version of this question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Which programming language should I focus on learning?&lt;/p&gt;

  &lt;p&gt;What technologies should I be learning, so that they prove helpful in my career?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To many of them I have said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Don’t bother to fix yourself into a grove/niche just yet. You are just starting out, try any and everything that catches your attention and feels interesting.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you are just starting out, it is not very useful to just focus on one language/technology. It might even happen that that one thing which you start focusing on doesn’t interest you at all and you just get behind it because you think that it has better career-prospects. In that case your life would become terrible and since you are not interested in your learning, you won’t be producing your best output. Which in turn would cause you to be mediocre at-best.&lt;/p&gt;

&lt;p&gt;Let me give my own example, my first foray into programming was during my 10th grade, it was a 10-day after-school crash-course in C programming. It was an utterly horrible experience for me. After those 10-days I swore to never learn programming. The next year in school it was a choice for me to select either Computer Science or Biology, I chose CS because Bio was worse for me. Near the end of high-school I had decidedly switched my career goal from becoming an aerospace engineer to becoming a programmer.&lt;/p&gt;

&lt;p&gt;Then college came and this was the time that I actually got to know what a vast sea of options stood in front of me. I was also enthusiastic about picking one language and then mastering it to get a good job and build cool things. There was just one hurdle for me (it actually turned out to be a boon), I didn’t have anyone to ask which language to choose and similarly there wasn’t anyone advising me to choose one, as I did not have confidence in either my teachers’ or my seniors’ knowledge in those regards. So I started looking at different things.&lt;/p&gt;

&lt;p&gt;I started with learning Java as I wanted to make GUIs. Let’s just say that it took around a whole semester to be able to get a chat program working on local-network. Then tried learning about Android development, but poor developer experience turned me away. Then after seeing a friend using Visual Studio’s Layout Editor, I decided to learn C# because it was easier to create GUIs in. For some weird reason, I picked-up Visual Basic. Got bored with it in less than a week. My journey with C# didn’t last long. as there came Python, with all its conciseness and no explicit data-types. I had no idea what I should build with them, I just wanted to learn “cool stuff”.&lt;/p&gt;

&lt;p&gt;Except these, there were other periods too, like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 months of competitive algorithmic problem solving, because I wanted to win Google Code-Jam :sweat_smile:&lt;/li&gt;
  &lt;li&gt;A month of learning SQL as I wanted to become “The DB Programmer”&lt;/li&gt;
  &lt;li&gt;Quite a few months of tinkering with Arduino and IOT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But none of those were able to hold my interest for long. Then I got offered an internship as Android Developer from my neighbor in his new startup. I had nothing to lose and too much to gain so I joined it. That was the turning point of my life that finally fixed my interest in Android Development.&lt;/p&gt;

&lt;p&gt;Today 4 years after the start of that internship, I am near completing my first year as a professional Android dev. If I hadn’t tried all those many things I never would have known how little do I like them.&lt;/p&gt;

&lt;p&gt;So finally, before parting, this would be my only comment. Don’t worry too much about which technology or language or new hip-concept to focus on and build a career in. Keep an eye out and make sure to try everything that you find interesting. You pretty sure won’t be able to so easily try everything after you start working professionally, an you would have to learn to feel okay with that. My friend &lt;a href=&quot;https://goobar.io&quot;&gt;Nate Ebel&lt;/a&gt; has recently written a nice &lt;a href=&quot;https://goobar.io/2019/03/17/you-dont-have-to-know-it-all/&quot;&gt;article&lt;/a&gt; on it.&lt;/p&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h2&gt;

&lt;p&gt;Those are my thoughts on picking a speciality very early on in your development career. You can contact me via &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">What technologies should I be learning, so that they prove helpful in my career?</summary></entry><entry><title type="html">Show/Hide Layout Bounds in Android</title><link href="https://varunbarad.com/tools/android/2019/03/08/show-hide-android-layout-bounds.html" rel="alternate" type="text/html" title="Show/Hide Layout Bounds in Android" /><published>2019-03-08T12:00:00+05:30</published><updated>2019-03-08T12:00:00+05:30</updated><id>https://varunbarad.com/tools/android/2019/03/08/show-hide-android-layout-bounds</id><content type="html" xml:base="https://varunbarad.com/tools/android/2019/03/08/show-hide-android-layout-bounds.html">&lt;p&gt;A couple of scripts that help to toggle display of layout-bounds on connected Android device using ADB.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;Sometimes while working in Android we need to display the layout-bounds on device. Recent Android versions do provide an action-tile to do so. But on previous versions, we had to go too deep into the Settings application. I wanted to be able to perform the switch from my computer.&lt;/p&gt;

&lt;p&gt;ADB does provide methods to do so, but the commands are not easy to remember and also get tiresome after some time.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# We need to execute both lines to&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make the layout-bounds show&lt;/span&gt;
adb shell setprop debug.layout &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;adb shell service call activity 1599295570
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I made 2 files named &lt;code class=&quot;highlighter-rouge&quot;&gt;show-lb.sh&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hide-lb.sh&lt;/code&gt;, which respectively show and hide the layout-bounds on our testing device.&lt;/p&gt;

&lt;p&gt;The files are as below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show-lb.sh&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell setprop debug.layout &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
adb shell service call activity 1599295570 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hide-lb.sh&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb sehll setprop debug.layout &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
adb shell service call activity 1599295570 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt; part at the end of each line is just so that the output of that particular command does not get displayed in our terminal as we don’t need it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Note for Windows users:&lt;/code&gt; You friends need to omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt; and save these files as &lt;code class=&quot;highlighter-rouge&quot;&gt;show-lb.bat&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;hide-lb.bat&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can save these files (make sure to give them &lt;code class=&quot;highlighter-rouge&quot;&gt;executable&lt;/code&gt; permission if you are on a unix-based machine) and then add their location to system’s &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variable. That way you can execute these from anywhere.&lt;/p&gt;

&lt;p&gt;I do think that I would indeed make a version of this in the future where it check the current state and automatically toggle it.&lt;/p&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h2&gt;

&lt;p&gt;This was my solution to improve my daily work experience by 1%. If you have more such ideas/examples or any other suggestions  under the sky, &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">A couple of scripts that help to toggle display of layout-bounds on connected Android device using ADB.</summary></entry><entry><title type="html">Creating a single-file backup of your git repository</title><link href="https://varunbarad.com/tools/2019/03/03/git-repository-single-file-backup.html" rel="alternate" type="text/html" title="Creating a single-file backup of your git repository" /><published>2019-03-03T12:00:00+05:30</published><updated>2019-03-03T12:00:00+05:30</updated><id>https://varunbarad.com/tools/2019/03/03/git-repository-single-file-backup</id><content type="html" xml:base="https://varunbarad.com/tools/2019/03/03/git-repository-single-file-backup.html">&lt;p&gt;I created a python script which creates a zip-file containing the git-bundle and all the patch-files for different stashed changes in your repository.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;Last week I needed to take a backup of my laptop’s contents because I needed to give it for repair. When I started just plain copying my files to an external hard-drive I noticed that the git-files (the files used by git to store version-history for project) were taking too much time since they were very small in size but huge in numbers. So I decided to find a way using which I could create a single-file for each git enabled project and then just copy that single file over to the external hard-drive.&lt;/p&gt;

&lt;p&gt;I came across two options provided by git itself:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git archive&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git bundle&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;archive&lt;/code&gt; creates just a snapshot of how the project is at that particular instance and does not contain any of the version-history stuff, so this option went out the window for me.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; gave me the option to generate a single-file containing all of my version-history across all the branches. This appeared to me to be &lt;strong&gt;the solution&lt;/strong&gt; that I was looking for.&lt;/p&gt;

&lt;p&gt;But alas, &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; doesn’t store any data of the changes you have stashed in your local-repo.&lt;/p&gt;

&lt;p&gt;After much searching I couldn’t find anything that gave me both the version-history and all the stashed changes in a single file. So I decided to write my own python script which would create zip file containing the bundle file generated by &lt;code class=&quot;highlighter-rouge&quot;&gt;git bundle&lt;/code&gt; and patch-files for all the stashed changes in my repo.&lt;/p&gt;

&lt;p&gt;I have described how I made the program in this article, though if you only want the script, I have put a link to the gist at the bottom of this article.&lt;/p&gt;

&lt;h2 id=&quot;project-breakdown&quot;&gt;Project breakdown&lt;/h2&gt;

&lt;p&gt;I decided to break the project down into parts and then conquer them one-by-one.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Getting the directory for which the git-backup needs to be generated&lt;/li&gt;
  &lt;li&gt;Checking if that directory is actually the root directory for a git-enabled project&lt;/li&gt;
  &lt;li&gt;Creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;git bundle&lt;/code&gt; file from within the python script&lt;/li&gt;
  &lt;li&gt;Check if the project has any changes that haven’t been committed or stashed yet&lt;/li&gt;
  &lt;li&gt;Stashing any changes that I find in the step above&lt;/li&gt;
  &lt;li&gt;Check if the project has any stashed changes&lt;/li&gt;
  &lt;li&gt;Creating individual patch-files for all the stashed changes found in previous step&lt;/li&gt;
  &lt;li&gt;Creating a zip-file which contains the bundle file from git and all the patch-files that we created in previous step&lt;/li&gt;
  &lt;li&gt;Deleting the bundle and patch-files since we already have them included in the zip-file&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-1-getting-the-directory&quot;&gt;Step 1: Getting the directory&lt;/h2&gt;

&lt;p&gt;I decided to give 2 options to the user. They can either:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Go to the directory via terminal and execute my script from there&lt;/li&gt;
  &lt;li&gt;Provide the directory as a command-line argument to my script&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In python &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.argv&lt;/code&gt; returns a list of command-line arguments passed to our program.
Since the first item in that list is always the name of our program so we ignore it and take a look at the rest of the list.&lt;/p&gt;

&lt;p&gt;If the rest of the list is empty, we take the first use-case in consideration, ie- the user has launched our program from the directory which they want to backup. Therefore we use &lt;code class=&quot;highlighter-rouge&quot;&gt;os.getcwd()&lt;/code&gt; which returns the system’s current working-directory, which would be the directory from where our script was launched.&lt;/p&gt;

&lt;p&gt;After that we use &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.abspath(directory_to_backup)&lt;/code&gt; to clean the path provided to us and also convert it to absolute path as used by the system.&lt;/p&gt;

&lt;h2 id=&quot;step-2-checking-if-this-is-a-root-directory-for-a-git-project&quot;&gt;Step 2: Checking if this is a root-directory for a git project&lt;/h2&gt;

&lt;p&gt;Next up on the list was to check whether the directory that we are supplied is actually the root-directory for a project which has git initiated in it. This is very important since the rest of the script would just crash if we try to execute it on a folder which isn’t actually a git project.&lt;/p&gt;

&lt;p&gt;I decided to just check for the presence of a &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder inside the root folder that was supplied to us. Git stores all of its data for that project in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder inside that project. If you people know of a better way to make this check do let me know.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;create_backup_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' is not a git repository'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.exists&lt;/code&gt; checks for the existence of &lt;code class=&quot;highlighter-rouge&quot;&gt;git_directory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;os.path.isdir&lt;/code&gt; checks that it is actually a directory and not just a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-3-creating-a-git-bundle-from-within-my-script&quot;&gt;Step 3: Creating a git bundle from within my script&lt;/h2&gt;

&lt;p&gt;Before this I had only created the git bundles from the terminal and never from within a python script. I had no idea how to do so.&lt;/p&gt;

&lt;p&gt;First I decided that I would issue terminal commands from my script and capture the output of those commands. But then I thought that it probably might not work well across platforms (I am looking at you Windows).&lt;/p&gt;

&lt;p&gt;I then went looking for a library in python to interact with git repositories. First result that Google came up with was &lt;strong&gt;GitPython&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I started reading the documentation for it and very quickly (like in under 5 minutes) started to get overwhelmed by all the git related concepts that it was throwing at me. But after around 10 minutes of searching, I found something that was helpful. I could get a handle on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo&lt;/code&gt; object for that git-project and then execute my git commands using that handle.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.bundle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the equivalent of:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git bundle create &amp;lt;git_bundle_name&amp;gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; flag is to include all the branches and not just the current branch.&lt;/p&gt;

&lt;h2 id=&quot;step-4-check-for-any-changes-that-arent-committed-or-stashed&quot;&gt;Step 4: Check for any changes that aren’t committed or stashed&lt;/h2&gt;

&lt;p&gt;Next I needed to check for any changes that haven’t been committed and also haven’t been stashed, so that we can stash them.&lt;/p&gt;

&lt;p&gt;Just running &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; gives me a list of the changed files, but it also outputs other things to make it human-friendly. There is an option &lt;code class=&quot;highlighter-rouge&quot;&gt;--porcelain&lt;/code&gt; which strips all that extra info.&lt;/p&gt;

&lt;p&gt;There are some files which have been left untracked, we don’t want to create a new stash when all of the uncommitted files are only files that are untracked. So we filter the lines by the value in their first column and remove any lines whose first-column value is made only of &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;. I don’t know what the values of first column mean, but I only know that &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; signifies files that are untracked. If our list of unstaged files is not empty after removing all untracked files, then we perform the next step or else we skip it.&lt;/p&gt;

&lt;h2 id=&quot;step-5-stash-any-changes-from-working-tree-and-staging-area&quot;&gt;Step 5: Stash any changes from working tree and staging area&lt;/h2&gt;

&lt;p&gt;If we find that we have any unstaged but not untracked files then we stash those changes. The command is a simple one.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'git-backup-stash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-6-now-we-check-if-the-project-has-any-stashed-changes&quot;&gt;Step 6: Now we check if the project has any stashed changes&lt;/h2&gt;

&lt;p&gt;Now we check if the project has any stashed changes. We do this so that we can determine whether or not we need to make any patch files. Git has a simple command to list all the stashes.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linesep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Create patch-files here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-7-create-patch-files-for-any-stashes-we-have&quot;&gt;Step 7: Create patch files for any stashes we have&lt;/h2&gt;

&lt;p&gt;Now we create patch files for any stashes that we have in our local repo. These files can then later be used to restore the changes that were stashed. Each stash entry gets its own patch file.&lt;/p&gt;

&lt;p&gt;Format of the patch-file’s name is as below:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;stash_name&amp;gt;:&amp;lt;branch_name&amp;gt;:&amp;lt;stash_message&amp;gt;.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'patch-files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist_ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stash_branch_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stash_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;patch_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_branch_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.txt'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;patch_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-8-create-a-zip-file-of-the-bundle-and-all-the-patch-files&quot;&gt;Step 8: Create a zip-file of the bundle and all the patch files&lt;/h2&gt;

&lt;p&gt;Now all we need to do is integrate all of those above files into a single zip file. First we write the bundle file created by git into the zip file. Then we include the patch files, if we have any, into a sub-folder called “patch-files” in the zip file.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;zip_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.zip'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;zip_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zip_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'patch-files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-9-deleting-the-bundle-file-and-the-patch-files&quot;&gt;Step 9: Deleting the bundle file and the patch files&lt;/h2&gt;

&lt;p&gt;Not so fast buddy, we still need to delete that git-bundle file and those patch-files that we created. Since we already have included them in our zip file, we no longer need them and therefore should clean those.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;full-code&quot;&gt;Full Code&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;shutil&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;zipfile&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_backup_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.bundle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'--all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;pattern_for_untracked_files_flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^\?+$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;non_staged_files_raw_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--porcelain'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non_staged_files_raw_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;non_staged_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern_for_untracked_files_flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_staged_files_raw_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linesep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;non_staged_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non_staged_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'push'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'git-backup-stash'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linesep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stashes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'patch-files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makedirs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exist_ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stash_branch_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;stash_message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;': '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;patch_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;':'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_branch_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.txt'&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;patch_contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;git_handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'show'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stash_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;zip_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;directory_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.zip'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;zip_file_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zip_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZipFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_file_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arcname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'patch-files'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_bundle_file_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;shutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rmtree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch_files_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zip_file_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' created'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcwd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.git'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;git_directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;create_backup_zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directory_to_backup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' is not a git repository'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/VarunBarad/c291e98dd426b0da1322171290d7bbd0&quot;&gt;GitHub gist: https://gist.github.com/VarunBarad/c291e98dd426b0da1322171290d7bbd0&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h2&gt;

&lt;p&gt;This is my solution to the problem I faced of taking a backup of my projects which also included unfinished work of mine. If you have any other suggestions regarding these or any other topics under the sky, &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">I created a python script which creates a zip-file containing the git-bundle and all the patch-files for different stashed changes in your repository.</summary></entry><entry><title type="html">How Breathing Works</title><link href="https://varunbarad.com/medicine/2018/10/27/how-breathing-works.html" rel="alternate" type="text/html" title="How Breathing Works" /><published>2018-10-27T12:00:00+05:30</published><updated>2018-10-27T12:00:00+05:30</updated><id>https://varunbarad.com/medicine/2018/10/27/how-breathing-works</id><content type="html" xml:base="https://varunbarad.com/medicine/2018/10/27/how-breathing-works.html">&lt;p&gt;Ever wondered how our breathing is regulated? Let me take you on a ride down the wind-pipe.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;A while ago I read a prank online. It was&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Now you are breathing manually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It got me manually breathing then just as it got you now. This spurred me into thinking about the mechanics of how different parts of our respiratory system operate, how is the air actually inhaled and exhaled and what part/parts of our brain control it. Let me tell you what I learnt.&lt;/p&gt;

&lt;h2 id=&quot;moving-with-the-air&quot;&gt;Moving with the air&lt;/h2&gt;

&lt;p&gt;Let us first take a short trip inside our bodies to understand how the air we breathe travels inside us.&lt;/p&gt;

&lt;h3 id=&quot;1-taking-a-breath&quot;&gt;1. Taking a breath&lt;/h3&gt;

&lt;p&gt;When you take a breath, the air goes through your nose and/or mouth, down your throat and into the trachea (also known as windpipe).&lt;/p&gt;

&lt;h3 id=&quot;2-into-the-lungs&quot;&gt;2. Into the lungs&lt;/h3&gt;

&lt;p&gt;The end of trachea splits into an upside down Y-shape (something like this ⅄), thus forming the two bronchi (bronchus for singular). Air passes through left or right bronchus into respective lung.&lt;/p&gt;

&lt;h3 id=&quot;3-climbing-the-branches-of-the-bronchial-tree&quot;&gt;3. Climbing the branches of the bronchial tree&lt;/h3&gt;

&lt;p&gt;Inside the lungs, each bronchus branch off into a tree-like structure of bronchioles. The air flows through bronchioles, which keep getting smaller, until it reaches the end of branches.&lt;/p&gt;

&lt;h3 id=&quot;4-filling-up-countless-tiny-balloons&quot;&gt;4. Filling up countless tiny balloons&lt;/h3&gt;

&lt;p&gt;At the end of each bronchiole, there is a tiny balloon like tissue structure called alveolus (plural alveoli) which forms an air pocket where external air is collected.&lt;/p&gt;

&lt;h3 id=&quot;5-gas-exchange&quot;&gt;5. Gas exchange&lt;/h3&gt;

&lt;p&gt;When the air reaches the alveoli, a process similar to osmosis dissolves the oxygen from the air into capillaries while extracting carbon-dioxide from blood into the air inside alveoli at the same time.&lt;/p&gt;

&lt;h3 id=&quot;6-the-journey-back-to-surface&quot;&gt;6. The journey back to surface&lt;/h3&gt;

&lt;p&gt;The exhale phase starts at this moment and the air in the alveoli travel back to outside world following the same path it came in. That is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Alveoli&lt;/li&gt;
  &lt;li&gt;Bronchiole&lt;/li&gt;
  &lt;li&gt;Bronchi&lt;/li&gt;
  &lt;li&gt;Trachea&lt;/li&gt;
  &lt;li&gt;Throat&lt;/li&gt;
  &lt;li&gt;Nose/Mouth&lt;/li&gt;
  &lt;li&gt;Sweet freedom of outside world&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mechanics-of-all-these&quot;&gt;Mechanics of all these&lt;/h2&gt;

&lt;p&gt;There are 2 main mechanical processes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;How is air inhaled?&lt;/li&gt;
  &lt;li&gt;Consequently, how is it exhaled afterwards?&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1-inhaling-the-external-air&quot;&gt;1. Inhaling the external air&lt;/h3&gt;

&lt;p&gt;When we want to inhale, the diaphragm (a large dome-shaped muscle located below the lungs) and the muscles between our lungs and rib-cage contract, thus creating a vacuum (more precisely they create a negative air-pressure). This forces the external air to enter our lungs through the path mentioned earlier.&lt;/p&gt;

&lt;h3 id=&quot;2-exhaling-the-inside-air&quot;&gt;2. Exhaling the inside air&lt;/h3&gt;

&lt;p&gt;Subsequently, when we want to exhale the air that we inhaled into the lungs, the same muscles (diaphragm and the muscles between lungs and rib-cage) relax. This creates a positive air-pressure inside lungs which forces the air inside them to go out.&lt;/p&gt;

&lt;h2 id=&quot;controlling-our-breathing&quot;&gt;Controlling our breathing&lt;/h2&gt;

&lt;p&gt;Finally returning to my original question of, “How is the actual breathing controlled? Who determines whether we breath manually or autonomously?”&lt;/p&gt;

&lt;p&gt;There is a part of our brain aptly named “Respiratory center”. Respiratory center (RC) is responsible for generating and maintaining the rhythm of respiration. They receive control/sensor signals of neural, chemical and hormonal nature. After processing these signals, this center sends down the appropriate signal(s) to the muscles involved in breathing. These signals ensure that your breathing muscles contract and relax regularly, thus allowing the breathing to be automatic without us even being aware of it.&lt;/p&gt;

&lt;p&gt;Although to a limited degree we can also affect our breathing rate. The cerebral-cortex sends one of the control signal to RC. This allows us to do things like holding our breath, breathing faster/slower than usual consciously.&lt;/p&gt;

&lt;p&gt;Our emotions can also affect our breathing pattern. Like being scared or angry can increase our respiratory rate. It also depends upon how physically active we are at the moment or what are the conditions of air around us.&lt;/p&gt;

&lt;p&gt;Two of the main sensor systems for respiratory regulations are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sensors in the brain and the 2 major blood vessels (the carotid artery and the aorta) detect levels of CO&lt;sub&gt;2&lt;/sub&gt; and O&lt;sub&gt;2&lt;/sub&gt; mixed in the blood and change our breathing as needed.&lt;/li&gt;
  &lt;li&gt;Sensors in the airways (mouth, nose, trachea etc.) detect lung irritants. These sensors are generally responsible for triggering sneezes or coughs. After all sneezing and coughing are a form of sharp exhale of air from lungs.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h2&gt;

&lt;p&gt;These are my finding when I went down the Internet lanes to find the answer of “How is our breathing rate controlled?”. If you have any other suggestions regarding these or any other topics under the sky, &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I am not a doctor and I don’t pose as one on the internet. This post is just a compilation of what I found while learning about this topic.&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.verywellhealth.com/physiology-of-breathing-998219&quot;&gt;Verywell Health (https://www.verywellhealth.com/physiology-of-breathing-998219)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nhlbi.nih.gov/health-topics/how-lungs-work&quot;&gt;National Heart, Lung and Blood Institute, US (https://www.nhlbi.nih.gov/health-topics/how-lungs-work)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Respiratory_center&quot;&gt;Wikipedia - Respiratory center (https://en.wikipedia.org/wiki/Respiratory_center)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Varun Barad</name></author><summary type="html">Ever wondered how our breathing is regulated? Let me take you on a ride down the wind-pipe.</summary></entry><entry><title type="html">APGAR score</title><link href="https://varunbarad.com/medicine/2018/10/19/apgar-score.html" rel="alternate" type="text/html" title="APGAR score" /><published>2018-10-19T12:00:00+05:30</published><updated>2018-10-19T12:00:00+05:30</updated><id>https://varunbarad.com/medicine/2018/10/19/apgar-score</id><content type="html" xml:base="https://varunbarad.com/medicine/2018/10/19/apgar-score.html">&lt;p&gt;A quick method used to check whether a newborn needs immediate medical care.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The Apgar score is a method to quickly summarize the health of newborn children against infant mortality. Virginia Apgar, an anesthesiologist at NewYork–Presbyterian Hospital, developed the score in 1952 to quantify the effects of obstetric anesthesia on babies.&lt;/p&gt;

&lt;p&gt;The Apgar score is determined by evaluating the newborn baby on 5 simple criteria, each on a scale of zero to two. Then summing up the five values thus obtained gives a final Apgar score on the scale of zero to ten.&lt;/p&gt;

&lt;p&gt;The five criteria are summarized using words with APGAR as acronym:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Appearance&lt;/li&gt;
  &lt;li&gt;Pulse&lt;/li&gt;
  &lt;li&gt;Grimace&lt;/li&gt;
  &lt;li&gt;Activity&lt;/li&gt;
  &lt;li&gt;Respiratory effort&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;criteria&quot;&gt;Criteria&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Score of 0&lt;/th&gt;
      &lt;th&gt;Score of 1&lt;/th&gt;
      &lt;th&gt;Score of 2&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Appearance (Skin Color)&lt;/td&gt;
      &lt;td&gt;Blue or pale all over&lt;/td&gt;
      &lt;td&gt;Blue at extremities; Body pink&lt;/td&gt;
      &lt;td&gt;Completely pink&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Pulse (Heart-beat)&lt;/td&gt;
      &lt;td&gt;Absent&lt;/td&gt;
      &lt;td&gt;Less than 100 beats per minute&lt;/td&gt;
      &lt;td&gt;More than 100 beats per minute&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Grimace (Reflex irritability)&lt;/td&gt;
      &lt;td&gt;No response to stimulation&lt;/td&gt;
      &lt;td&gt;Grimace on suction or aggressive stimulation&lt;/td&gt;
      &lt;td&gt;Cry on stimulation&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Activity&lt;/td&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;Flexed arms and legs&lt;/td&gt;
      &lt;td&gt;Active movement&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Respiratory effort&lt;/td&gt;
      &lt;td&gt;Absent&lt;/td&gt;
      &lt;td&gt;Weak, irregular gasping&lt;/td&gt;
      &lt;td&gt;Strong robust cry&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;interpretation-of-scores&quot;&gt;Interpretation of scores&lt;/h2&gt;

&lt;p&gt;The test is generally done at 1 and 5 minutes after birth and may be repeated later if the score is and remains low.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;7 and above are generally normal&lt;/li&gt;
  &lt;li&gt;4 to 6 are considered fairly low&lt;/li&gt;
  &lt;li&gt;3 or below are regarded as critically low and imply need of immediate resuscitative efforts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apgar test’s purpose is to quickly determine whether or not a newborn needs immediate medical care.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I am not a doctor and I don’t pose as one on the internet. This post is just a compilation of what I found while learning about this topic.&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Apgar_score&quot;&gt;Wikipedia - Apgar score (https://en.wikipedia.org/wiki/Apgar_score)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Varun Barad</name></author><summary type="html">A quick method used to check whether a newborn needs immediate medical care.</summary></entry><entry><title type="html">How anesthetics work</title><link href="https://varunbarad.com/medicine/2018/08/13/how-anesthetics-work.html" rel="alternate" type="text/html" title="How anesthetics work" /><published>2018-08-13T12:00:00+05:30</published><updated>2018-08-13T12:00:00+05:30</updated><id>https://varunbarad.com/medicine/2018/08/13/how-anesthetics-work</id><content type="html" xml:base="https://varunbarad.com/medicine/2018/08/13/how-anesthetics-work.html">&lt;p&gt;A post on the different categories of anesthetics and their working mechanisms and differences.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;Anesthetics are used to relieve people of the feeling of pain.&lt;/p&gt;

&lt;p&gt;There are three types of anesthetics based on their site of action:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Local anesthetic&lt;/li&gt;
  &lt;li&gt;Regional anesthetic&lt;/li&gt;
  &lt;li&gt;General anesthetic&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;local-anesthetic&quot;&gt;Local anesthetic&lt;/h2&gt;

&lt;p&gt;Local anesthetics are applied when very specific parts of the patient are to be made numb.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Dentists giving anesthetic injection before performing a root canal operation&lt;/li&gt;
  &lt;li&gt;Numbing out a toe before removing infected nail&lt;/li&gt;
  &lt;li&gt;Applied in low doses around hip during delivery to numb off labor pain (the injections for this are generally given in the spinal discs located between vertebrae)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These can be of 2 kinds:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Topical (applied externally as a cream, gel or spray)&lt;/li&gt;
  &lt;li&gt;Injected (the anesthetic is injected with the use of a syringe for deeper effect)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sometimes a topical anesthetic is applied before giving the injection (to avoid the pain of injection or of the drug itself) for deeper anesthetic so as to numb out the pain of injection also.&lt;/p&gt;

&lt;p&gt;Local anesthetics bind with the neurotransmitters of that area thus blocking their receptors making them essentially unavailable for transporting pain signals.&lt;/p&gt;

&lt;p&gt;These are very simple with ultra rare cases of any long-lasting effects and can thus be safely administered by a standard medical practitioner.&lt;/p&gt;

&lt;p&gt;Example: Procaine, Lidocaine&lt;/p&gt;

&lt;p&gt;One of the problem with these drugs is that they are vaso-dilators (they expanding blood vessels) and can sometimes cause excessive blood loss. This is easily counter-acted by epinephrine.&lt;/p&gt;

&lt;h2 id=&quot;regional-anesthetic&quot;&gt;Regional anesthetic&lt;/h2&gt;

&lt;p&gt;Regional anesthetics are applied when a larger part of the body is to be numbed out.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Numbing a whole foot (applied at the hip of that particular foot so that the whole set of nerves transporting signals to and from that foot get blocked)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sub-categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Peripheral regional anesthesia &lt;br /&gt;
Administered to numb-out usually a limb&lt;/li&gt;
  &lt;li&gt;Central anesthesia (not same as general anesthesia) &lt;br /&gt;
It involves an injection into the cerebro-spinal fluid or the epidural space just outside spinal canal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regional anesthetics are generally local anesthetics applied in larger quantity at strategic sites so that the whole bunch of nerves going to the targeted region get blocked.&lt;/p&gt;

&lt;p&gt;These generally need more precautions than local anesthetics since it has higher chance of something going wrong.&lt;/p&gt;

&lt;p&gt;Women who have given birth are probably very familiar with the central anesthetic technique known as an epidural. In this procedure, an anesthesiologist inserts a catheter into the epidural space, typically in the lower back area. This continuously feeds drugs such as lidocaine as well as fentanyl or clonidine to provide pain relief, resulting in a loss of sensation from the waist down.&lt;/p&gt;

&lt;p&gt;Spinal blocks, which are injected into the cerebrospinal fluid, are often used for other procedures below the waist, such as Cesarean sections or hernia surgery. They tend to paralyze further than epidurals.&lt;/p&gt;

&lt;h2 id=&quot;general-anesthetic&quot;&gt;General anesthetic&lt;/h2&gt;

&lt;p&gt;General anesthetics are used when the patient needs to be “put under” or made completely unconscious.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Knee replacement&lt;/li&gt;
  &lt;li&gt;Heart bypass&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Much less is known about the exact functioning of general anesthetics, but so far it has been understood that these function in the fat-based medium of the cells.&lt;/p&gt;

&lt;p&gt;The current accepted theory is that they affect the spinal cord (which is why you end up immobile), the brain stem reticular activating system (which explains the unconsciousness) and the cerebral cortex (which results in changes in electrical activity on an electroencephalogram).&lt;/p&gt;

&lt;p&gt;A whole team of anesthetic specialists is needed when the patient is to be put under general anesthetic so that their condition can be constantly monitored and corrective procedures taken in case the patient’s condition gets worse.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nitrous-Oxide is a popular choice for use as general anesthetic, it is administered in the form of inhaled gas.&lt;/li&gt;
  &lt;li&gt;Other types of general anesthetics(like Valium) can also be administered through an IV line.&lt;/li&gt;
  &lt;li&gt;It is quick to start its effects and similarly quick to wear off.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You’ll most likely be instructed not to eat for several hours before surgery. It’s possible for someone under general anesthesia to aspirate, or breathe in, the contents of the stomach.&lt;/li&gt;
  &lt;li&gt;When you’re under general anesthesia, you’ll be wearing a breathing mask or breathing tube, because the muscles become too relaxed to keep your airways open.&lt;/li&gt;
  &lt;li&gt;Several different things are continuously monitored while you’re under – pulse oximetry (oxygen level in the blood), heart rate, blood pressure, respiratory rate, carbon dioxide exhalation levels, temperature, the concentration of the anesthetic and brain activity. There’s also an alarm that goes off if your oxygen level drops below a certain point.&lt;/li&gt;
  &lt;li&gt;There are 4 stages of general anesthesia
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Induction:&lt;/strong&gt; The patient is given the medication and may start to feel its effects but hasn’t yet fallen unconscious.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Excitement:&lt;/strong&gt; Twitching and irregular breathing patterns or heart rates. Patients don’t remember any of this as they are unconscious. Very short stage which progresses rapidly to next one.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Relaxed/Anesthetized:&lt;/strong&gt; The muscles relax and breathing becomes regular. This is the target stage.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Overdose:&lt;/strong&gt; This isn’t part of the regular process. This overdose can result in halting heart or breath which may lead to brain damage or death if swift action isn’t taken.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;procedural-sedation-bonus-category&quot;&gt;Procedural Sedation (Bonus category)&lt;/h2&gt;

&lt;p&gt;Procedural sedation is much like general sedation in terms of its area of effect (it also works on the whole body) but in way milder doses.&lt;/p&gt;

&lt;p&gt;The patient is usually awake and can respond to questions, but is not necessarily aware of what’s happening to/around him. The patient is usually in a sleepy and relaxed state.&lt;/p&gt;

&lt;p&gt;Due to low dosages, the side-effects observed with general anesthesia are usually not observed in case of procedural sedation.&lt;/p&gt;

&lt;p&gt;Alternate names:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Conscious sedation&lt;/li&gt;
  &lt;li&gt;Twilight anesthesia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Care needs to be taken that the patient doesn’t slip into deeper sedation state.&lt;/p&gt;

&lt;h3 id=&quot;notes-1&quot;&gt;Notes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Normally anesthetics are administered with analgesics that also help in dulling-down the pain.&lt;/li&gt;
  &lt;li&gt;While administering anesthetics, many-a-times some kind of vaso-constrictor is used to counter-act the vaso-dilator action of the anesthetic&lt;/li&gt;
  &lt;li&gt;Local anesthetics are usually mixed with different diluents including (but not limited to)
    &lt;ul&gt;
      &lt;li&gt;Sterile saline solution&lt;/li&gt;
      &lt;li&gt;Sterile distilled water&lt;/li&gt;
      &lt;li&gt;Spinal Fluid&lt;/li&gt;
      &lt;li&gt;Sterile dextrose solution (for hyperbaric technique)
        &lt;ul&gt;
          &lt;li&gt;Hyperbaric solutions in spinal anesthesia are solutions that have a density greater than that of spinal fluid.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After surgery, the patient goes to a PACU (post-anesthesia care unit).
    &lt;ul&gt;
      &lt;li&gt;Often the patient will be given warm IV fluids to counteract both the dehydration resulting from anesthesia as well as shivering from changes in body temperature.&lt;/li&gt;
      &lt;li&gt;As analgesic effect wears off, the patient also receives some sort of pain-relief medication.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;questions&quot;&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Why do general anesthetic medicines only affect those part of brain related to conscious/non-autonomic functions?&lt;/li&gt;
  &lt;li&gt;Can the patient who is put under general anesthetic still see dreams?&lt;/li&gt;
  &lt;li&gt;Why are heart-beats and breathing not as affected as the sensory receptors?&lt;/li&gt;
  &lt;li&gt;As we move from sea-level air pressure to lower air pressure areas at higher altitude, we adjust our breathing without us giving it even a single conscious thought, if a patient under general anesthetic were to face such change in pressure will their body handle that change itself or will it cause any complication?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;I am not a doctor and I don’t pose as one on the internet. This post is just a compilation of what I found while learning about this topic.&lt;/p&gt;

&lt;h3 id=&quot;sources&quot;&gt;Sources&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://science.howstuffworks.com/anesthesia.htm&quot;&gt;How Stuff Works - Anesthetics (https://science.howstuffworks.com/anesthesia.htm)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.drugs.com/pro/novocain.html&quot;&gt;Novocaine/Procaine (https://www.drugs.com/pro/novocain.html)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Varun Barad</name></author><summary type="html">A post on the different categories of anesthetics and their working mechanisms and differences.</summary></entry><entry><title type="html">Critical mistakes to avoid in Android development</title><link href="https://varunbarad.com/android/2018/03/14/critical-mistakes-to-avoid-in-android-development.html" rel="alternate" type="text/html" title="Critical mistakes to avoid in Android development" /><published>2018-03-14T12:00:00+05:30</published><updated>2018-03-14T12:00:00+05:30</updated><id>https://varunbarad.com/android/2018/03/14/critical-mistakes-to-avoid-in-android-development</id><content type="html" xml:base="https://varunbarad.com/android/2018/03/14/critical-mistakes-to-avoid-in-android-development.html">&lt;p&gt;Charlie Munger has said that avoiding to be stupid is more beneficial when compared to trying to be intelligent.
So, let’s take a look at some mistakes that we can avoid while walking the path of Android development.&lt;/p&gt;

&lt;!-- end excerpt --&gt;

&lt;p&gt;As many pioneers and leaders in different fields have paraphrased:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In any endeavor, it is important to know what are the top few things that need to be done right. But, it is equally important, if not more, to know the top few things which people should avoid at all costs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My posts up until now have been about how to perform a particular task on Android. Heeding the above saying, today I will be writing about the first five mistakes which I think should be avoided by Android developers.&lt;/p&gt;

&lt;h2 id=&quot;not-putting-all-the-strings-to-be-displayed-in-stringsxml&quot;&gt;Not putting all the strings to be displayed in strings.xml&lt;/h2&gt;

&lt;p&gt;This provides for a poor internationalization experience, as you will have to design your own ways of displaying the correct version of a message based on the user’s locale.&lt;/p&gt;

&lt;p&gt;If the messages are in strings.xml, then they can easily be translated and integrated into the app. The Android OS then seamlessly handles which string resource to use based on the locale that the user has set on their device.&lt;/p&gt;

&lt;p&gt;Here are a few of the reasons given by users to not use string-resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Need context to access:&lt;/strong&gt; If you wish to display that string to UI, you will inevitably need/have some kind of context there too. Just use that same context to fetch the string&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;But I only need it in this one place:&lt;/strong&gt; There is no telling when tomorrow you might need to have that same string in some other file. It is better to invest an extra minute to provide insurance against future problems&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Complex string with run-time data:&lt;/strong&gt; Friends, Android has you covered. There are parameterized strings supported by the platform with a syntax similar to the one used in Java’s &lt;code class=&quot;highlighter-rouge&quot;&gt;String.format()&lt;/code&gt;. More than that, plural-strings (using different strings based on the quantity of something) are also supported. Check out &lt;a href=&quot;https://stackoverflow.com/questions/2397613/are-parameters-in-strings-xml-possible&quot; title=&quot;Parameterized Strings&quot;&gt;this StackOverflow post&lt;/a&gt; for parameterized strings and the &lt;a href=&quot;https://developer.android.com/guide/topics/resources/string-resource.html&quot; title=&quot;Plural Strings&quot;&gt;official documentation&lt;/a&gt; for plural-strings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;not-using-data-binding&quot;&gt;Not using data-binding&lt;/h2&gt;

&lt;p&gt;Who likes to write cumbersome &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById&lt;/code&gt; calls and then maintain the reference to those views in their current namespace? Also, in that case we need to keep our view-id’s so that we are sure of which view-id we are using in &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById&lt;/code&gt; . This is because autocomplete in Android Studio will suggest every id (from all layouts), but only those present in the current layout tree will be available to &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById&lt;/code&gt; . Non-existent ones will return &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; (probably causing a &lt;code class=&quot;highlighter-rouge&quot;&gt;NullPointerException&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Google has made it extremely easy to integrate data-binding into any app (new/existing) and eliminate all those pesky boilerplate view-reference stuff.&lt;/p&gt;

&lt;p&gt;A few of the benefits of using data-binding (over not using it) are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;References to only present views available (trying to refer to an absent component will show an error while editing the file in AS. It will also throw a compile-time error instead of biting you at runtime.).&lt;/li&gt;
  &lt;li&gt;A bit faster due to it needing to traverse the whole layout-tree only once as opposed to every-time when &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById&lt;/code&gt; is called.&lt;/li&gt;
  &lt;li&gt;Your working namespace (class/function) remains clean, and you don’t have to keep a reference to all the views.&lt;/li&gt;
  &lt;li&gt;You can use as few of the features in data-binding as just using it to eliminate &lt;code class=&quot;highlighter-rouge&quot;&gt;findViewById&lt;/code&gt; calls to much more advanced features (like in this post, George Mount of Google tries to write a single adapter for all the recycler-views in an app).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;not-hiding-api-keys&quot;&gt;Not hiding API keys&lt;/h2&gt;

&lt;p&gt;This is a common problem which is domain-agnostic and made mostly by junior developers in almost all the areas. Once you commit some piece of code to version control it remains there forever. Even if you remove that API key in future commits, anyone who has access to that repository can view the key from its history and all sorts of problems can follow.&lt;/p&gt;

&lt;p&gt;You can take a look at &lt;a href=&quot;https://varunbarad.com/android/2018/02/01/hiding-api-keys-from-your-android-repository.html&quot;&gt;this post&lt;/a&gt; to figure out how to hide your API keys from your repository while still including them in the build process and making them available in your code.&lt;/p&gt;

&lt;h2 id=&quot;not-taking-activity-life-cycle-into-account&quot;&gt;Not taking activity life-cycle into account&lt;/h2&gt;

&lt;p&gt;Any type of configuration change will cause the current activity to be destroyed and created again. To make sure that the transition is seamless for the user, we need to store the state our app was in just before the configuration change. Then we can recreate it just how the user expects it to be using the state after our activity is created anew following the configuration change.&lt;/p&gt;

&lt;p&gt;While on the subject, we should also store the app’s state when our current activity moves to stopped state. After that, our app may be killed as per the system’s need of resources.&lt;/p&gt;

&lt;h2 id=&quot;not-learning-the-keyboard-shortcuts-in-android-studio&quot;&gt;Not learning the keyboard shortcuts in Android Studio&lt;/h2&gt;

&lt;p&gt;This might not be something which reflects in the code you write, but it highly affects your total workflow. Android Studio is built on top of IntelliJ Idea (an IDE famous for its keyboard friendliness). This means that there is a lot to be gained in developer productivity by simply investing a bit of time in learning different keyboard shortcuts. Here are some of my favorite resources to help you with that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;KeyPromoter -&lt;/strong&gt;  This is an IntelliJ plugin (available in AS) which would display a giant ugly dialogue, showing the shortcut command for the action you just performed, whenever you use your mouse to do something. Trust me, this one will annoy the hell out of you and kind of force you to learn those shortcuts. You can find and download it from the plugins section of Android Studio settings.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cheat-sheet -&lt;/strong&gt; &lt;a href=&quot;https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf&quot;&gt;This is an official printable cheat-sheet&lt;/a&gt; for the keyboard shortcuts by Jetbrains (the company behind IntelliJ). Versions for both Windows and Mac are available.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Official Guide-&lt;/strong&gt;  &lt;a href=&quot;https://www.jetbrains.com/help/idea/mastering-intellij-idea-keyboard-shortcuts.html&quot;&gt;This is the official guide&lt;/a&gt; provided by Jetbrains to mastering keyboard shortcuts on IntelliJ platform.&lt;/li&gt;
  &lt;li&gt;Also check out these two videos
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=hdrAlhRI5vM&quot;&gt;Android Studio Shortcuts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eOV2owswDkE&quot;&gt;Android Studio: (About) 10 Things You (Probably) Didn’t Know You Could Do&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thats-all-folks&quot;&gt;That’s all folks&lt;/h3&gt;

&lt;p&gt;These are the five things which I think anyone working in Android development should focus on first. If you have any other suggestions regarding these or any other topics under the sky, &lt;a href=&quot;https://varunbarad.com/contact&quot;&gt;contact me&lt;/a&gt; or tweet to me &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Charlie Munger has said that avoiding to be stupid is more beneficial when compared to trying to be intelligent. So, let’s take a look at some mistakes that we can avoid while walking the path of Android development.</summary></entry></feed>