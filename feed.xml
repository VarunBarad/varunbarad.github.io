<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://varunbarad.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://varunbarad.com/" rel="alternate" type="text/html" /><updated>2020-07-12T16:27:22+05:30</updated><id>https://varunbarad.com/feed.xml</id><title type="html">Varun Barad - Curious Developer</title><subtitle>My online home where I post about new things I learn or find interesting.</subtitle><author><name>Varun Barad</name></author><entry><title type="html">Interesting Stuff - Week 3</title><link href="https://varunbarad.com/blog/interesting-stuff-week-3" rel="alternate" type="text/html" title="Interesting Stuff - Week 3" /><published>2020-07-12T12:00:00+05:30</published><updated>2020-07-12T12:00:00+05:30</updated><id>https://varunbarad.com/blog/interesting-stuff-week-3</id><content type="html" xml:base="https://varunbarad.com/blog/interesting-stuff-week-3">&lt;p&gt;Hi folks, these are the interesting things I found during this week.&lt;/p&gt;

&lt;h2 id=&quot;the-kind-of-long-game-that-can-be-played&quot;&gt;&lt;a href=&quot;https://www.bloomberg.com/news/features/2020-07-01/did-china-steal-canada-s-edge-in-5g-from-nortel&quot;&gt;The kind of long game that can be played&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I am not saying that what is written in this article is morally right, heck it can even be incorrect. But all of us can definitely learn some lessons on the scale of long-term game which can be played.&lt;/p&gt;

&lt;h2 id=&quot;charlie-munger-and-the-pursuit-of-worldly-wisdom&quot;&gt;&lt;a href=&quot;https://fs.blog/2015/09/munger-worldly-wisdom/&quot;&gt;Charlie Munger and the Pursuit of Worldly Wisdom&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I was made aware this week that not everyone is familiar with Charlie Munger. So to correct that, here is a short article on why he is not only one of the best investors in the world, but also one of the best thinkers too.&lt;/p&gt;

&lt;h2 id=&quot;indian-financial-system-code&quot;&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Indian_Financial_System_Code&quot;&gt;Indian Financial System Code&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During some recent work, I had to deal with users inputting IFS code for their account. I wanted to find out if there is any specified pattern for these codes, and that is how I ended up on this simple Wikipedia page for the same.&lt;/p&gt;

&lt;p&gt;PS: I learned that it is to be spoken as “IFS code” and not as “IFSC code”.&lt;/p&gt;

&lt;h2 id=&quot;quantum-computer-programming&quot;&gt;&lt;a href=&quot;https://www.sckaiser.com/&quot;&gt;Quantum Computer Programming&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;During one of Twitch raids I came across Twitch office hours session of Dr. Sarah Kaiser. She is an experimental quantum physicist and also works on open-source programs for quantum computers.&lt;/p&gt;

&lt;p&gt;You can find her website at &lt;a href=&quot;https://www.sckaiser.com&quot;&gt;https://www.sckaiser.com&lt;/a&gt; or join her live on Twitch &lt;a href=&quot;https://www.twitch.tv/crazy4pi314&quot;&gt;@crazy4pi314&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-are-highways-designed&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9XIjqdk69O4&quot;&gt;How are highways designed&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;This is an awesome video which shows what all factors are taken into consideration when highways (or more generally any roads) are being designed, what constraints dictate the radius of curve or the angle of a slope.&lt;/p&gt;

&lt;p&gt;If you find something interesting and think I should check it out send it over to &lt;a href=&quot;mailto:interesting@varunbarad.com&quot;&gt;interesting@varunbarad.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Hi folks, these are the interesting things I found during this week.</summary></entry><entry><title type="html">Interesting Stuff - Week 2</title><link href="https://varunbarad.com/blog/interesting-stuff-week-2" rel="alternate" type="text/html" title="Interesting Stuff - Week 2" /><published>2020-07-05T12:00:00+05:30</published><updated>2020-07-05T12:00:00+05:30</updated><id>https://varunbarad.com/blog/interesting-stuff-week-2</id><content type="html" xml:base="https://varunbarad.com/blog/interesting-stuff-week-2">&lt;p&gt;Hi folks, this is the second edition of my new experiment where I list articles, podcasts, videos or basically anything I found interesting during last week.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OpoLkMcQh24&quot;&gt;The Baboon That Controlled a Railway for 9 Years&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=9Y9ppMqXwkQ&quot;&gt;Autofocusing reading glasses of the future - Nitish Padmanaban&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://karpathy.github.io/2020/06/11/biohacking-lite/&quot;&gt;Biohacking Lite&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://thomask.sdf.org/blog/2019/11/09/take-care-editing-bash-scripts.html&quot;&gt;Pitfalls in editing a bash script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you find something interesting and think I should check it out send it over to &lt;a href=&quot;mailto:interesting@varunbarad.com&quot;&gt;interesting@varunbarad.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Hi folks, this is the second edition of my new experiment where I list articles, podcasts, videos or basically anything I found interesting during last week.</summary></entry><entry><title type="html">Interesting Stuff - Week 1</title><link href="https://varunbarad.com/blog/interesting-stuff-week-1" rel="alternate" type="text/html" title="Interesting Stuff - Week 1" /><published>2020-06-28T12:00:00+05:30</published><updated>2020-06-28T12:00:00+05:30</updated><id>https://varunbarad.com/blog/interesting-stuff-week-1</id><content type="html" xml:base="https://varunbarad.com/blog/interesting-stuff-week-1">&lt;p&gt;Hi fellows, I am starting a new experiment, where I would be listing some articles, podcasts, videos or basically anything I found interesting that week into a post. Here goes the first edition of that.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://fs.blog/2015/09/two-types-of-knowledge&quot;&gt;Max Planck / Chauffeur Knowledge Test&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sklum.github.io/2020/06/14/sleep-hygiene-for-software-engineers.html&quot;&gt;Sleep Hygiene for Software Engineers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/interactive/2020/06/09/magazine/remote-work-covid.html&quot;&gt;Awesome Graphics&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://static01.nyt.com/images/2020/06/14/magazine/14mag-remote/14mag-remote-superJumbo.jpg&quot;&gt;Direct Image Link 1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://static01.nyt.com/images/2020/06/14/magazine/14mag-remote-02/14mag-remote-02-superJumbo.jpg&quot;&gt;Direct Image Link 2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you find something interesting and think I should check it out send it over to &lt;a href=&quot;mailto:interesting@varunbarad.com&quot;&gt;interesting@varunbarad.com&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Hi fellows, I am starting a new experiment, where I would be listing some articles, podcasts, videos or basically anything I found interesting that week into a post. Here goes the first edition of that.</summary></entry><entry><title type="html">Prevent back navigation to login screen</title><link href="https://varunbarad.com/blog/prevent-back-navigation-to-login-screen" rel="alternate" type="text/html" title="Prevent back navigation to login screen" /><published>2020-06-21T12:00:00+05:30</published><updated>2020-06-21T12:00:00+05:30</updated><id>https://varunbarad.com/blog/prevent-back-navigation-to-login-screen</id><content type="html" xml:base="https://varunbarad.com/blog/prevent-back-navigation-to-login-screen">&lt;p&gt;There is a typical use-case in apps where once the user has logged in, you won’t want them to return to login screens when they press back. Instead what you want is to close the app itself.&lt;/p&gt;

&lt;p&gt;I have encountered such a situation many times but learnt this week that the path I was following was way suboptimal and had its flaws. I also got introduced to a much cleaner approach of achieving that.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Let us say that our app has 2 activities &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt;. We don’t want anyone to reach &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt; until they haven’t logged in. And we also want that when user presses back from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt; they exit the app instead of going back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt; (normal behavior of pressing back on an activity is to open the previous activity which opened current activity).&lt;/p&gt;

&lt;h2 id=&quot;what-i-used-to-do&quot;&gt;What I used to do&lt;/h2&gt;

&lt;p&gt;Till now I used to setup &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt; such that it won’t be saved to the back-stack. I used to  set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:noHistory&lt;/code&gt; flag for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Atleast I thought that this was just preventing the activity from being placed on back-stack. But what it actually does is tells the system to not maintain any kind of history for instances of this activity class.&lt;/p&gt;

&lt;p&gt;I never realized the problem with this because it worked okay with single-screen login flows (so far I had built only those). The place where this breaks is when you have multiple screens for login implemented via fragments.&lt;/p&gt;

&lt;p&gt;What I started to notice in multi-screen login flow is that once user passes the first screen and then leaves the app (via pressing home-button, thus not actually going back) and come back to it they are brought back to the first fragment in the flow instead of taking them back to the fragment/screen where they left the app.&lt;/p&gt;

&lt;p&gt;The problem here was the android system was completely forgetting everything about the activity as soon as the user left. All it remembered was that this is the activity that user left on and thus when they come back, they have to be shown this activity again.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-solution-for-this&quot;&gt;What is the solution for this&lt;/h2&gt;

&lt;p&gt;One of my colleague (&lt;a href=&quot;https://twitter.com/sanchita_ag&quot;&gt;Sanchita&lt;/a&gt;) showed me a much better way to do this. This method does not set any flags on any activity thus they keep their natural behavior of resuming user to the fragment that they left on.&lt;/p&gt;

&lt;p&gt;What you want to do is, once the user is logged-in, you provide a couple of flags to the intent that launches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt;. Those flags tell it to clear the current task and launch our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt; on a new task. This new task won’t have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt; in its back-stack so when user presses back on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt; the app would exit instead of taking them back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LoginActivity&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is how the launching code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DashboardActivity&lt;/code&gt; should look like:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;startDashboardActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DashboardActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FLAG_ACTIVITY_CLEAR_TASK&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can look at this &lt;a href=&quot;https://stackoverflow.com/a/29565717/4717436&quot;&gt;StackOverflow answer&lt;/a&gt; which explains those flags in much more detail.&lt;/p&gt;

&lt;p&gt;Anyways, this was more as a documentation of my learning than a tutorial so do ask if there was still anything unclear in my explanation.&lt;/p&gt;

&lt;p&gt;Feel free to reach out to me to discuss this or anything else. You can find me on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt; or &lt;a href=&quot;mailto:contact@varunbarad.com&quot;&gt;email me&lt;/a&gt;&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">There is a typical use-case in apps where once the user has logged in, you won’t want them to return to login screens when they press back. Instead what you want is to close the app itself.</summary></entry><entry><title type="html">Foie Gras</title><link href="https://varunbarad.com/blog/foie-gras" rel="alternate" type="text/html" title="Foie Gras" /><published>2020-06-17T12:00:00+05:30</published><updated>2020-06-17T12:00:00+05:30</updated><id>https://varunbarad.com/blog/foie-gras</id><content type="html" xml:base="https://varunbarad.com/blog/foie-gras">&lt;p&gt;I was listening to the podcast &lt;a href=&quot;https://www.iheart.com/podcast/105-stuff-you-should-know-26940277/&quot;&gt;“Stuff You Should Know”&lt;/a&gt; and today I got across their minisode on &lt;a href=&quot;https://www.iheart.com/podcast/105-stuff-you-should-know-26940277/episode/short-stuff-foie-gras-63697112/&quot;&gt;“Foie Gras”&lt;/a&gt;. Here’s my compilation of what I have remembered from them.&lt;/p&gt;

&lt;p&gt;Foie Gras literally translates to “fatty liver”. It is made by force-feeding birds (primarily geese) which makes their liver fatty. This is an adaptation those birds developed which helps them store extra energy for their seasonal migrations.&lt;/p&gt;

&lt;p&gt;At some point in history, humans figured out that livers with extra fat taste quite different (and tasty to some people). So they started force-feeding geese and presented the dish made from their liver to the local kings. This process of preparation was (and still today is) significantly costlier than regular meat and thus made it popular among people of higher social position as something of a status symbol. Civilisation through civilization it somehow reached France where it got the name we know it today with, Foie Gras.&lt;/p&gt;

&lt;p&gt;Now many people are taking a stance against it saying that it is harmful to the birds because their conditions when they are being force-fed are deplorable. Due to such oppositions serving foie gras is on the roadmap to become illegal somewhere around the year 2022 in parts of US. It is already banned in many other countries of the world.&lt;/p&gt;

&lt;p&gt;There have even been people bringing their own point that it is not as harmful to birds as it looks. They say that since birds don’t share the same tube between oesophagus and trachea, it (apparently) isn’t as uncomfortable for them to have a pipe shoved down their throat as it is for humans. They even say that birds already have the mechanism in them to handle extra food and being overfed doesn’t bother them that much, that they are just accelerating the process that the birds would have naturally done.&lt;/p&gt;

&lt;p&gt;I personally believe that humans can do completely fine without resorting to eat extra fatty liver from birds that have been fed beyond their regular capacity. Feel free to reach out to me to discuss this or anything else under the stars over &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt; on Twitter.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">I was listening to the podcast “Stuff You Should Know” and today I got across their minisode on “Foie Gras”. Here’s my compilation of what I have remembered from them.</summary></entry><entry><title type="html">Immigration Dead Man’s Switch</title><link href="https://varunbarad.com/blog/immigration-dead-mans-switch" rel="alternate" type="text/html" title="Immigration Dead Man's Switch" /><published>2020-05-16T12:00:00+05:30</published><updated>2020-05-16T12:00:00+05:30</updated><id>https://varunbarad.com/blog/immigration-dead-mans-switch</id><content type="html" xml:base="https://varunbarad.com/blog/immigration-dead-mans-switch">&lt;p&gt;&lt;strong&gt;Necessary disclaimer:&lt;/strong&gt; I am not a lawyer so please don’t take my statements here on face value, do your own due diligence before pulling off any stunts.&lt;/p&gt;

&lt;p&gt;When passing through customs check, the customs agents have the right to ask for your fingerprint or any other biometrics but they don’t have the right to ask you to enter your password/pin-code.&lt;/p&gt;

&lt;p&gt;So there is an option in both iPhone and Android, check for iPhone but in Android it is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lockdown Mode&lt;/code&gt;. This makes it so that your phone can only be opened with the designated pin-code or password.&lt;/p&gt;

&lt;p&gt;What I suggest with devices having finger-print or facial unlock, use the biometric lock for daily use and keep a looong passcode.&lt;/p&gt;

&lt;p&gt;One way to memorize a long number is to not use a custom number but to pick one of the constants from Physics/Chemistry/Mathematics. That way even if you forget the exact digits, you can just look up its value online. The security lies in no-one knowing what constant you have used. They don’t even know that you are using a constant. Go for atleast 10-digit pin.&lt;/p&gt;

&lt;p&gt;Then comes the risk of immigration agents detaining you and when you are travelling alone you don’t even have the option to contact your lawyer because the agents might cut your access to your devices too.&lt;/p&gt;

&lt;p&gt;So for this you set something that’s called a “dead man’s switch”. The concept comes from war, here someone rigs up a switch not in the way that when they press it the bomb blasts. But in the way that if they release it, the bomb blasts. So even if someone kills them there is a much higher chance of the bomb going off.&lt;/p&gt;

&lt;p&gt;What you have to do is, right before you enter the immigration check. Message someone you trust that you are about to pass through customs. Give them all the details as to the airport where you are, the flight by which you came, etc. Ask them to contact your lawyer if they don’t hear back from you within a specified time (a couple of hours probably). Then when you are cleared of immigration just let them know that you are out of the hairy-zone.&lt;/p&gt;

&lt;p&gt;I got the idea of this from one of &lt;a href=&quot;https://youtu.be/f-mHLBD64HM?t=195&quot;&gt;CGP Grey’s video&lt;/a&gt; over on YouTube.&lt;/p&gt;

&lt;p&gt;Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Necessary disclaimer: I am not a lawyer so please don’t take my statements here on face value, do your own due diligence before pulling off any stunts.</summary></entry><entry><title type="html">Keep Android screen on When USB is connected</title><link href="https://varunbarad.com/blog/keep-android-screen-on-when-usb-connected" rel="alternate" type="text/html" title="Keep Android screen on When USB is connected" /><published>2020-05-11T12:00:00+05:30</published><updated>2020-05-11T12:00:00+05:30</updated><id>https://varunbarad.com/blog/keep-android-screen-on-when-usb-connected</id><content type="html" xml:base="https://varunbarad.com/blog/keep-android-screen-on-when-usb-connected">&lt;p&gt;To keep your Android phone screen from turning off when it is connected to your PC and you are using it to debug apps, enter the following command once in your terminal with the device connected.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb shell svc power stayon usb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This sets flag inside the device using adb that whenever this device is connected via USB to not turn its screen off automatically.&lt;/p&gt;

&lt;p&gt;Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">To keep your Android phone screen from turning off when it is connected to your PC and you are using it to debug apps, enter the following command once in your terminal with the device connected.</summary></entry><entry><title type="html">Write Custom Android Lint Rule - Manifest File</title><link href="https://varunbarad.com/blog/write-custom-android-lint-rule-manifest-file" rel="alternate" type="text/html" title="Write Custom Android Lint Rule - Manifest File" /><published>2020-02-28T12:00:00+05:30</published><updated>2020-02-28T12:00:00+05:30</updated><id>https://varunbarad.com/blog/write-custom-android-lint-rule-manifest-file</id><content type="html" xml:base="https://varunbarad.com/blog/write-custom-android-lint-rule-manifest-file">&lt;p&gt;Welcome folks, last time we wrote a lint check for making sure that all of our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt; have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;This time we will be writing a check which works on our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AndroidManifest.xml&lt;/code&gt; file. This check will ensure that our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application&lt;/code&gt; tag has a child &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta-data&lt;/code&gt; tag with attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:name=&quot;android.webkit.WebView.MetricsOptOut&quot;&lt;/code&gt;. Read the background for that &lt;a href=&quot;https://developer.android.com/guide/webapps/managing-webview#metrics&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t yet then first go through &lt;a href=&quot;https://varunbarad.com/blog/write-custom-android-lint-rule-layout-files&quot;&gt;the last post&lt;/a&gt; otherwise you might not understand many things as we will be building upon what we have created in that post.&lt;/p&gt;

&lt;h2 id=&quot;changes-to-add-to-last-project&quot;&gt;Changes to add to last project&lt;/h2&gt;

&lt;p&gt;We will be building upon the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt; module we created last time. We would need to make following changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a new issue and detector pertaining to this manifest check&lt;/li&gt;
  &lt;li&gt;Register the new issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LintRegistry&lt;/code&gt; class&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;create-the-detector&quot;&gt;Create the detector&lt;/h2&gt;

&lt;p&gt;Create a class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WebViewMetricsMetaTagDetector&lt;/code&gt; which extends from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManifestDetector&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebViewMetricsMetaTagDetector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManifestDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now to define the Issue.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JvmStatic&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ISSUE_MISSING_WEBVIEW_METRICS_META_TAG&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MissingWebViewMetricsMetaTag&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;briefDescription&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Specify whether you want to opt-out of metrics tracking via WebView.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;explanation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;WebView can upload diagnostic data to Google. You can opt-out by specifying a `meta-data` tag under your `application` tag in manifest.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SECURITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;WebViewMetricsMetaTagDetector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MANIFEST_SCOPE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addMoreInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://developer.android.com/guide/webapps/managing-webview#metrics&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The things that have changed here are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;briefDescription&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explanation&lt;/code&gt; for the issue.&lt;/li&gt;
  &lt;li&gt;Scope inside the Implementation object passed against &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implementation&lt;/code&gt; parameter. We changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scope.ALL_RESOURCES_SCOPE&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Scope.MANIFEST_SCOPE&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We now override the 2 required methods:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApplicableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SdkConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TAG_APPLICATION&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visitElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XmlContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;containsWebViewMetricsOptOutTag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childNodes&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;meta-data&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toPairedNameValueList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android:name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android.webkit.WebView.MetricsOptOut&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNotEmpty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containsWebViewMetricsOptOutTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;issue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_WEBVIEW_METRICS_META_TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_WEBVIEW_METRICS_META_TAG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getExplanation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitElement&lt;/code&gt; method, we are traversing through all children of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;application&amp;gt;&lt;/code&gt; and checking that a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;meta-data&lt;/code&gt; tag with attribute &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:name=&quot;android.webkit.WebView.MetricsOptOut&quot;&lt;/code&gt; exists. If it does not exist then we raise our issue &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ISSUE_MISSING_WEBVIEW_METRICS_META_TAG&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;register-the-new-issue&quot;&gt;Register the new issue&lt;/h2&gt;

&lt;p&gt;The last thing we need to do now is to add the above created issue in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LintRegistry&lt;/code&gt; class.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LintRegistry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IssueRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CURRENT_API&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;InputTypeDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_INPUT_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;WebViewMetricsMetaTagDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_WEBVIEW_METRICS_META_TAG&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We added this line&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-the-lint-checks&quot;&gt;Run the lint checks&lt;/h2&gt;

&lt;p&gt;There we are done, now to run the lint checks using gradle&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./gradlew lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html">Welcome folks, last time we wrote a lint check for making sure that all of our EditText have the android:inputType attribute.</summary></entry><entry><title type="html">Write Custom Android Lint Rule - Layout Files</title><link href="https://varunbarad.com/blog/write-custom-android-lint-rule-layout-files" rel="alternate" type="text/html" title="Write Custom Android Lint Rule - Layout Files" /><published>2020-02-27T12:00:00+05:30</published><updated>2020-02-27T12:00:00+05:30</updated><id>https://varunbarad.com/blog/write-custom-android-lint-rule-layout-files</id><content type="html" xml:base="https://varunbarad.com/blog/write-custom-android-lint-rule-layout-files">&lt;p&gt;&lt;img src=&quot;https://varunbarad.com/assets/images/posts/headers/write-custom-android-lint-rule-layout-files.jpg&quot; alt=&quot;Article Header - Write Custom Android Lint Rules&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Welcome devs, I recently faced an issue where if I didn’t specify any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt; then keyboard capitalisation did not correctly show. The deeper problem was that I always forgot to include that attribute. So I decided to use a lint check which would fail my build if any of my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt; does not have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute.&lt;/p&gt;

&lt;p&gt;Since there was no such thing included in pre-provided checks I decided to write a custom lint rule. What follows is a guide on how to write a lint-check which goes checks all of our layout files and flags any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt; without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h2 id=&quot;what-is-android-lint&quot;&gt;What is Android lint?&lt;/h2&gt;

&lt;p&gt;Android lint is a tool which provides us static code-analysis (it does not need to run the application to identify potential problems). The Android SDK already provides us with some pre-made lint checks, but the best part is that it allows us to write our own custom lint checks.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-custom-lint-check&quot;&gt;Writing a custom lint check&lt;/h2&gt;

&lt;p&gt;We will be writing a lint check which checks whether each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.appcompat.widget.AppCompatEditText&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android.support.v7.widget.AppCompatEditText&lt;/code&gt; has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute defined or not.
This lint check is set to fail the build when it finds any of the above element not containing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute.&lt;/p&gt;

&lt;h3 id=&quot;create-a-new-library-module&quot;&gt;Create a new Library Module&lt;/h3&gt;

&lt;p&gt;In the project for which you want to write the lint check, add a new “Java or Kotlin Library” module.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For Library name you can put anything but I have used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;For Class name put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LintRegistry&lt;/code&gt; (we will get to the reasoning later)&lt;/li&gt;
  &lt;li&gt;I have selected Kotlin as the language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://varunbarad.com/assets/images/posts/write-custom-android-lint-rule-layout-files/create-new-module.png&quot; alt=&quot;Screenshot - Add new Java or Kotlin Library Module&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-dependencies-in-gradle&quot;&gt;Add dependencies in Gradle&lt;/h3&gt;

&lt;p&gt;You only need 3 dependencies in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt; module’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; and all of them need to be only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compileOnly&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileOnly&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.61&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileOnly&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.android.tools.lint:lint-api:26.6.0&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compileOnly&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.android.tools.lint:lint-checks:26.6.0&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-the-detector&quot;&gt;Create the detector&lt;/h3&gt;

&lt;p&gt;Now let’s write the class which will actually detect the issues. We create a new class named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputTypeDetector&lt;/code&gt; which extends from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LayoutDetector&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InputTypeDetector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LayoutDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we specify the Issue that we want our detector to raise when we find and edit-text without input-type. We declare it as a property under companion object of this class (and mark it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@JvmStatic&lt;/code&gt; so that it appears as static field when accessed from Java code).&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@JvmStatic&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;ISSUE_MISSING_INPUT_TYPE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MissingInputType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;briefDescription&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Specify inputType attribute to get proper keyboard shown by system.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;explanation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;You should specify an inputType for each EditText so that you can get the proper keyboard to be shown by system.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;USABILITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Severity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ERROR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;InputTypeDetector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ALL_RESOURCES_SCOPE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addMoreInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://developer.android.com/training/keyboard-input/style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The important things here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; - The name which is shown in the lint report&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;severity&lt;/code&gt; - There are many types of severity, here we have specified &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ERROR&lt;/code&gt; as we want the build to fail when we find this issue&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;implementation&lt;/code&gt; - The implementation defines which XML files to scan for this issue and which detector to use to detect this issue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After that we override the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getApplicableElements&lt;/code&gt;, where we specify for which elements we want this detector to be run (so that our detector doesn’t get unnecessarily called for every element).&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApplicableElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SdkConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;EDIT_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;androidx.appcompat.widget.AppCompatEditText&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;android.support.v7.widget.AppCompatEditText&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since we only want our detector to be called for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EditText&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;androidx.appcompat.widget.AppCompatEditText&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android.support.v7.widget.AppCompatEditText&lt;/code&gt; we return a list of all of them.&lt;/p&gt;

&lt;p&gt;The last thing remaining to be done in detector is to actually determine if any given element has the problem or not. For that we override the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitElement&lt;/code&gt; method.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;visitElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XmlContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hasAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SdkConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ATTR_INPUT_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Check if the element has the `android:inputType` attribute&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;issue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_INPUT_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// The issue that we defined above&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getLocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_INPUT_TYPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getExplanation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TextFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are doing 2 things&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Checking if given element has the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute or not&lt;/li&gt;
  &lt;li&gt;Raise the issue if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;android:inputType&lt;/code&gt; attribute is not present&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; One thing you might have noticed is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;location&lt;/code&gt; parameter, that is used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint&lt;/code&gt; tool to show exactly where any issue is reported.&lt;/p&gt;

&lt;h3 id=&quot;registering-the-issue&quot;&gt;Registering the Issue&lt;/h3&gt;

&lt;p&gt;Now we have declared the issue and corresponding detector, but we need to register them at a central location so that the lint tool knows that it has to execute these checks too. For that we go back to our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LintRegistry&lt;/code&gt; class that we declared earlier when creating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;We extend that class from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IssueRegistry&lt;/code&gt; class and override a couple of properties.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LintRegistry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IssueRegistry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CURRENT_API&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;issues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Issue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;InputTypeDetector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ISSUE_MISSING_INPUT_TYPE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any future issues that we declare/write are to be added to this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;issues&lt;/code&gt; property list.&lt;/p&gt;

&lt;h3 id=&quot;registering-our-issue-registry&quot;&gt;Registering our Issue Registry&lt;/h3&gt;

&lt;p&gt;We now need to declare this class within the manifest of our JAR. We do this in our build script. Add the following block under your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt; module’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Format is&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// attributes(&quot;Lint-Registry-v2&quot;: &quot;&amp;lt;fully-qualified-class-name-of-your-issue-registry&amp;gt;&quot;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Lint-Registry-v2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.varunbarad.androidlintchecks.LintRegistry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;integrating-our-custom-lint-check-module-into-our-project&quot;&gt;Integrating our custom lint check module into our project&lt;/h2&gt;

&lt;p&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; module go and add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lintChecks&lt;/code&gt; dependency on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lint-checks&lt;/code&gt; module like this&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lintChecks&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:lint-checks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;run-the-lint-checks&quot;&gt;Run the lint checks&lt;/h2&gt;

&lt;p&gt;That was all that was needed to write your custom lint check. Now whenever you run a lint check using gradle, it will also check whether your code passes our custom lint checks or not.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Command to run lint check&lt;/span&gt;
./gradlew lint
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;edits&quot;&gt;Edits&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;2020-03-02:&lt;/strong&gt; Add the step of “Registering our Issue Registry”&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Varun Barad</name></author><summary type="html"></summary></entry><entry><title type="html">Dart Extension Methods</title><link href="https://varunbarad.com/blog/dart-extensions-methods" rel="alternate" type="text/html" title="Dart Extension Methods" /><published>2020-02-04T12:00:00+05:30</published><updated>2020-02-04T12:00:00+05:30</updated><id>https://varunbarad.com/blog/dart-extensions-methods</id><content type="html" xml:base="https://varunbarad.com/blog/dart-extensions-methods">&lt;p&gt;&lt;img src=&quot;https://varunbarad.com/assets/images/posts/headers/dart-extension-methods.png&quot; alt=&quot;Article Header - Dart Extension Methods&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Welcome devs, have you tried your hands at extensions methods? Dart recently announced support for extension methods (from Dart 2.7) and extension properties.&lt;/p&gt;

&lt;p&gt;Extension methods are a way to add functionality to existing libraries. When you are using someone else’s library it’s often impractical/impossible to change the API. But you can &lt;em&gt;extend&lt;/em&gt; it using extension methods.&lt;/p&gt;

&lt;h2 id=&quot;what-are-extension-methods&quot;&gt;What are extension methods?&lt;/h2&gt;

&lt;p&gt;Consider the following code that parses a string into an integer:&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Won’t it look cleaner/better if this functionality was available on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; class like below?&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since the language (where class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; comes from) doesn’t provide such a method we can’t parse a string to an int like that. Extension methods allow us to specify such custom functionalities not provided by the library (Dart language in this case). Let’s see how to do that in next section.&lt;/p&gt;

&lt;h2 id=&quot;writing-a-basic-extension-method&quot;&gt;Writing a basic extension method&lt;/h2&gt;

&lt;p&gt;So we want to have a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parseInt&lt;/code&gt; &lt;strong&gt;on&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; class which would parse the given string to integer.&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For that we will define an extension method on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; like this&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// File: extension_methods.dart&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringExtras&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We can also define getters as extensions&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doubleLength&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we have named this set of extension methods as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringExtras&lt;/code&gt;, you can name them anything you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; As you might have noticed above, we can define multiple extension methods/getters under a single extension block.&lt;/p&gt;

&lt;h2 id=&quot;using-the-extension-method&quot;&gt;Using the extension method&lt;/h2&gt;

&lt;p&gt;Extension methods (once imported) can be used just like any member method on that class’s object. Our example would go like this&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'extension_methods.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Would print 50&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly we can use the getters too&lt;/p&gt;

&lt;div class=&quot;language-dart highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'extension_methods.dart'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'42'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doubleLength&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Would print 4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;important-notes&quot;&gt;Important Notes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Extension methods &lt;em&gt;don’t&lt;/em&gt; work with the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dynamic&lt;/code&gt;. However they &lt;em&gt;do&lt;/em&gt; work with Dart’s type inference.&lt;/li&gt;
  &lt;li&gt;Since extension methods are resolved statically, they’re as fast as calling a static function.&lt;/li&gt;
  &lt;li&gt;Extension methods can’t access private members of the class.&lt;/li&gt;
  &lt;li&gt;If an extension member has a name conflict then you should refer &lt;a href=&quot;https://dart.dev/guides/language/extension-methods#api-conflicts&quot;&gt;here&lt;/a&gt; for your options.&lt;/li&gt;
  &lt;li&gt;You can define extension methods on classes which take generic type parameters (for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;). Refer &lt;a href=&quot;https://dart.dev/guides/language/extension-methods#implementing-generic-extensions&quot;&gt;this section&lt;/a&gt; for further details.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://dart.dev/guides/language/extension-methods&quot;&gt;Official release documentation - https://dart.dev/guides/language/extension-methods&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to discuss this or any other interesting thing, hit me up on Twitter &lt;a href=&quot;https://twitter.com/varun_barad&quot;&gt;@varun_barad&lt;/a&gt;.&lt;/p&gt;</content><author><name>Varun Barad</name></author><summary type="html"></summary></entry></feed>